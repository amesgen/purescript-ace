// Generated by purs bundle 0.14.1
var PS = {};
(function(exports) {
  "use strict";

  exports.ace = ace;

  exports.editImpl = function (el, self) {
    return function () {
      return self.edit(el);
    };
  };

  exports.createEditSessionImpl = function (text, mode, self) {
    return function () {
      return self.createEditSession(text, mode);
    };
  };
})(PS["Ace"] = PS["Ace"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Ace"] = $PS["Ace"] || {};
  var exports = $PS["Ace"];
  var $foreign = $PS["Ace"];
  var edit = function (el) {
      return function (self) {
          return $foreign.editImpl(el, self);
      };
  };
  var createEditSession = function (text) {
      return function (mode) {
          return function (self) {
              return $foreign.createEditSessionImpl(text, mode, self);
          };
      };
  };
  exports["edit"] = edit;
  exports["createEditSession"] = createEditSession;
  exports["ace"] = $foreign.ace;
})(PS);
(function(exports) {
  "use strict";

  exports.onChangeImpl = function (self, fn) {
    return function () {
      return self.on("change", function (e) {
        fn(e)();
      });
    };
  };

  exports.getPosition = function (self) {
    return function () {
      return self.getPosition();
    };
  };

  exports.getDocument = function (self) {
    return function () {
      return self.getDocument();
    };
  };

  exports.setPositionImpl = function (row, column, noClip, self) {
    return function () {
      return self.setPosition(row, column, noClip);
    };
  };

  exports.detach = function (self) {
    return function () {
      self.detach();
    };
  };

  exports.setInsertRight = function (val) {
    return function (a) {
      return function () {
        a.$insertRight = val;
        return {};
      };
    };
  };
})(PS["Ace.Anchor"] = PS["Ace.Anchor"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Ace.Anchor"] = $PS["Ace.Anchor"] || {};
  var exports = $PS["Ace.Anchor"];
  var $foreign = $PS["Ace.Anchor"];      
  var setPosition = function (row) {
      return function (column) {
          return function (noClip) {
              return function (self) {
                  return $foreign.setPositionImpl(row, column, noClip, self);
              };
          };
      };
  };
  var onChange = function (self) {
      return function (fn) {
          return $foreign.onChangeImpl(self, fn);
      };
  };
  exports["onChange"] = onChange;
  exports["setPosition"] = setPosition;
  exports["getPosition"] = $foreign.getPosition;
  exports["getDocument"] = $foreign.getDocument;
  exports["detach"] = $foreign.detach;
  exports["setInsertRight"] = $foreign.setInsertRight;
})(PS);
(function(exports) {
  "use strict";

  exports.setDocumentImpl = function (doc, self) {
    return function () {
      return self.setDocument(doc);
    };
  };

  exports.fireUpdateEventImpl = function (firstRow, lastRow, self) {
    return function () {
      return self.fireUpdateEvent(firstRow, lastRow);
    };
  };

  exports.startImpl = function (startRow, self) {
    return function () {
      return self.start(startRow);
    };
  };

  exports.stop = function (self) {
    return function () {
      return self.stop();
    };
  };

  exports.getTokensImpl = function (row, self) {
    return function () {
      return self.getTokens(row);
    };
  };

  exports.getStateImpl = function (row, self) {
    return function () {
      return self.getState(row);
    };
  };
})(PS["Ace.BackgroundTokenizer"] = PS["Ace.BackgroundTokenizer"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Ace.BackgroundTokenizer"] = $PS["Ace.BackgroundTokenizer"] || {};
  var exports = $PS["Ace.BackgroundTokenizer"];
  var $foreign = $PS["Ace.BackgroundTokenizer"];
  var start = function (startRow) {
      return function (self) {
          return $foreign.startImpl(startRow, self);
      };
  };
  var setDocument = function (doc) {
      return function (self) {
          return $foreign.setDocumentImpl(doc, self);
      };
  };
  var getTokens = function (row) {
      return function (self) {
          return $foreign.getTokensImpl(row, self);
      };
  };
  var getState = function (row) {
      return function (self) {
          return $foreign.getStateImpl(row, self);
      };
  };
  var fireUpdateEvent = function (firstRow) {
      return function (lastRow) {
          return function (self) {
              return $foreign.fireUpdateEventImpl(firstRow, lastRow, self);
          };
      };
  };
  exports["setDocument"] = setDocument;
  exports["fireUpdateEvent"] = fireUpdateEvent;
  exports["start"] = start;
  exports["getTokens"] = getTokens;
  exports["getState"] = getState;
  exports["stop"] = $foreign.stop;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Control.Semigroupoid"] = $PS["Control.Semigroupoid"] || {};
  var exports = $PS["Control.Semigroupoid"];
  var Semigroupoid = function (compose) {
      this.compose = compose;
  };
  var semigroupoidFn = new Semigroupoid(function (f) {
      return function (g) {
          return function (x) {
              return f(g(x));
          };
      };
  });
  exports["semigroupoidFn"] = semigroupoidFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Control.Category"] = $PS["Control.Category"] || {};
  var exports = $PS["Control.Category"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];                
  var Category = function (Semigroupoid0, identity) {
      this.Semigroupoid0 = Semigroupoid0;
      this.identity = identity;
  };
  var identity = function (dict) {
      return dict.identity;
  };
  var categoryFn = new Category(function () {
      return Control_Semigroupoid.semigroupoidFn;
  }, function (x) {
      return x;
  });
  exports["identity"] = identity;
  exports["categoryFn"] = categoryFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Function"] = $PS["Data.Function"] || {};
  var exports = $PS["Data.Function"];
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  };
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  exports["flip"] = flip;
  exports["const"] = $$const;
})(PS);
(function(exports) {
  "use strict";

  exports.arrayMap = function (f) {
    return function (arr) {
      var l = arr.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(arr[i]);
      }
      return result;
    };
  };
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
  "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Unit"] = $PS["Data.Unit"] || {};
  var exports = $PS["Data.Unit"];
  var $foreign = $PS["Data.Unit"];
  exports["unit"] = $foreign.unit;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Functor"] = $PS["Data.Functor"] || {};
  var exports = $PS["Data.Functor"];
  var $foreign = $PS["Data.Functor"];
  var Data_Function = $PS["Data.Function"];
  var Data_Unit = $PS["Data.Unit"];                  
  var Functor = function (map) {
      this.map = map;
  };
  var map = function (dict) {
      return dict.map;
  };
  var $$void = function (dictFunctor) {
      return map(dictFunctor)(Data_Function["const"](Data_Unit.unit));
  };                                                                                             
  var functorArray = new Functor($foreign.arrayMap);
  exports["Functor"] = Functor;
  exports["map"] = map;
  exports["void"] = $$void;
  exports["functorArray"] = functorArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Control.Apply"] = $PS["Control.Apply"] || {};
  var exports = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];            
  var Apply = function (Functor0, apply) {
      this.Functor0 = Functor0;
      this.apply = apply;
  };                      
  var apply = function (dict) {
      return dict.apply;
  };
  var applySecond = function (dictApply) {
      return function (a) {
          return function (b) {
              return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Data_Function["const"](Control_Category.identity(Control_Category.categoryFn)))(a))(b);
          };
      };
  };
  exports["Apply"] = Apply;
  exports["apply"] = apply;
  exports["applySecond"] = applySecond;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Control.Applicative"] = $PS["Control.Applicative"] || {};
  var exports = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];          
  var Applicative = function (Apply0, pure) {
      this.Apply0 = Apply0;
      this.pure = pure;
  };
  var pure = function (dict) {
      return dict.pure;
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);
          };
      };
  };
  exports["Applicative"] = Applicative;
  exports["pure"] = pure;
  exports["liftA1"] = liftA1;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Control.Bind"] = $PS["Control.Bind"] || {};
  var exports = $PS["Control.Bind"];                 
  var Bind = function (Apply0, bind) {
      this.Apply0 = Apply0;
      this.bind = bind;
  };                     
  var bind = function (dict) {
      return dict.bind;
  };
  exports["Bind"] = Bind;
  exports["bind"] = bind;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Control.Monad"] = $PS["Control.Monad"] || {};
  var exports = $PS["Control.Monad"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];                
  var Monad = function (Applicative0, Bind1) {
      this.Applicative0 = Applicative0;
      this.Bind1 = Bind1;
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad.Bind1())(f)(function (f$prime) {
                  return Control_Bind.bind(dictMonad.Bind1())(a)(function (a$prime) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(f$prime(a$prime));
                  });
              });
          };
      };
  };
  exports["Monad"] = Monad;
  exports["ap"] = ap;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Control.Monad.Error.Class"] = $PS["Control.Monad.Error.Class"] || {};
  var exports = $PS["Control.Monad.Error.Class"];                
  var MonadThrow = function (Monad0, throwError) {
      this.Monad0 = Monad0;
      this.throwError = throwError;
  };
  var throwError = function (dict) {
      return dict.throwError;
  };
  exports["throwError"] = throwError;
  exports["MonadThrow"] = MonadThrow;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Either"] = $PS["Data.Either"] || {};
  var exports = $PS["Data.Either"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Functor = $PS["Data.Functor"];          
  var Left = (function () {
      function Left(value0) {
          this.value0 = value0;
      };
      Left.create = function (value0) {
          return new Left(value0);
      };
      return Left;
  })();
  var Right = (function () {
      function Right(value0) {
          this.value0 = value0;
      };
      Right.create = function (value0) {
          return new Right(value0);
      };
      return Right;
  })();
  var functorEither = new Data_Functor.Functor(function (f) {
      return function (m) {
          if (m instanceof Left) {
              return new Left(m.value0);
          };
          if (m instanceof Right) {
              return new Right(f(m.value0));
          };
          throw new Error("Failed pattern match at Data.Either (line 31, column 1 - line 31, column 52): " + [ m.constructor.name ]);
      };
  });
  var either = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Left) {
                  return v(v2.value0);
              };
              if (v2 instanceof Right) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Either (line 208, column 1 - line 208, column 64): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var applyEither = new Control_Apply.Apply(function () {
      return functorEither;
  }, function (v) {
      return function (v1) {
          if (v instanceof Left) {
              return new Left(v.value0);
          };
          if (v instanceof Right) {
              return Data_Functor.map(functorEither)(v.value0)(v1);
          };
          throw new Error("Failed pattern match at Data.Either (line 70, column 1 - line 72, column 30): " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var applicativeEither = new Control_Applicative.Applicative(function () {
      return applyEither;
  }, Right.create);
  exports["Left"] = Left;
  exports["Right"] = Right;
  exports["either"] = either;
  exports["functorEither"] = functorEither;
  exports["applicativeEither"] = applicativeEither;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Control.Monad.Except.Trans"] = $PS["Control.Monad.Except.Trans"] || {};
  var exports = $PS["Control.Monad.Except.Trans"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];                
  var ExceptT = function (x) {
      return x;
  };
  var runExceptT = function (v) {
      return v;
  }; 
  var mapExceptT = function (f) {
      return function (v) {
          return f(v);
      };
  };
  var functorExceptT = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return mapExceptT(Data_Functor.map(dictFunctor)(Data_Functor.map(Data_Either.functorEither)(f)));
      });
  };
  var monadExceptT = function (dictMonad) {
      return new Control_Monad.Monad(function () {
          return applicativeExceptT(dictMonad);
      }, function () {
          return bindExceptT(dictMonad);
      });
  };
  var bindExceptT = function (dictMonad) {
      return new Control_Bind.Bind(function () {
          return applyExceptT(dictMonad);
      }, function (v) {
          return function (k) {
              return Control_Bind.bind(dictMonad.Bind1())(v)(Data_Either.either((function () {
                  var $91 = Control_Applicative.pure(dictMonad.Applicative0());
                  return function ($92) {
                      return $91(Data_Either.Left.create($92));
                  };
              })())(function (a) {
                  var v1 = k(a);
                  return v1;
              }));
          };
      });
  };
  var applyExceptT = function (dictMonad) {
      return new Control_Apply.Apply(function () {
          return functorExceptT(((dictMonad.Bind1()).Apply0()).Functor0());
      }, Control_Monad.ap(monadExceptT(dictMonad)));
  };
  var applicativeExceptT = function (dictMonad) {
      return new Control_Applicative.Applicative(function () {
          return applyExceptT(dictMonad);
      }, (function () {
          var $93 = Control_Applicative.pure(dictMonad.Applicative0());
          return function ($94) {
              return ExceptT($93(Data_Either.Right.create($94)));
          };
      })());
  };
  var monadThrowExceptT = function (dictMonad) {
      return new Control_Monad_Error_Class.MonadThrow(function () {
          return monadExceptT(dictMonad);
      }, (function () {
          var $103 = Control_Applicative.pure(dictMonad.Applicative0());
          return function ($104) {
              return ExceptT($103(Data_Either.Left.create($104)));
          };
      })());
  };
  exports["runExceptT"] = runExceptT;
  exports["mapExceptT"] = mapExceptT;
  exports["applicativeExceptT"] = applicativeExceptT;
  exports["bindExceptT"] = bindExceptT;
  exports["monadThrowExceptT"] = monadThrowExceptT;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Identity"] = $PS["Data.Identity"] || {};
  var exports = $PS["Data.Identity"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Functor = $PS["Data.Functor"];          
  var Identity = function (x) {
      return x;
  };
  var functorIdentity = new Data_Functor.Functor(function (f) {
      return function (m) {
          return f(m);
      };
  });
  var applyIdentity = new Control_Apply.Apply(function () {
      return functorIdentity;
  }, function (v) {
      return function (v1) {
          return v(v1);
      };
  });
  var bindIdentity = new Control_Bind.Bind(function () {
      return applyIdentity;
  }, function (v) {
      return function (f) {
          return f(v);
      };
  });
  var applicativeIdentity = new Control_Applicative.Applicative(function () {
      return applyIdentity;
  }, Identity);
  var monadIdentity = new Control_Monad.Monad(function () {
      return applicativeIdentity;
  }, function () {
      return bindIdentity;
  });
  exports["monadIdentity"] = monadIdentity;
})(PS);
(function(exports) {
  "use strict";

  // jshint maxparams: 3

  exports.traverseArrayImpl = (function () {
    function array1(a) {
      return [a];
    }

    function array2(a) {
      return function (b) {
        return [a, b];
      };
    }

    function array3(a) {
      return function (b) {
        return function (c) {
          return [a, b, c];
        };
      };
    }

    function concat2(xs) {
      return function (ys) {
        return xs.concat(ys);
      };
    }

    return function (apply) {
      return function (map) {
        return function (pure) {
          return function (f) {
            return function (array) {
              function go(bot, top) {
                switch (top - bot) {
                case 0: return pure([]);
                case 1: return map(array1)(f(array[bot]));
                case 2: return apply(map(array2)(f(array[bot])))(f(array[bot + 1]));
                case 3: return apply(apply(map(array3)(f(array[bot])))(f(array[bot + 1])))(f(array[bot + 2]));
                default:
                  // This slightly tricky pivot selection aims to produce two
                  // even-length partitions where possible.
                  var pivot = bot + Math.floor((top - bot) / 4) * 2;
                  return apply(map(concat2)(go(bot, pivot)))(go(pivot, top));
                }
              }
              return go(0, array.length);
            };
          };
        };
      };
    };
  })();
})(PS["Data.Traversable"] = PS["Data.Traversable"] || {});
(function(exports) {
  "use strict";

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Maybe"] = $PS["Data.Maybe"] || {};
  var exports = $PS["Data.Maybe"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];          
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var maybe = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nothing) {
                  return v;
              };
              if (v2 instanceof Just) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe (line 230, column 1 - line 230, column 51): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };                                                         
  var isJust = maybe(false)(Data_Function["const"](true));
  var functorMaybe = new Data_Functor.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Just) {
              return new Just(v(v1.value0));
          };
          return Nothing.value;
      };
  });
  var fromJust = function (dictPartial) {
      return function (v) {
          if (v instanceof Just) {
              return v.value0;
          };
          throw new Error("Failed pattern match at Data.Maybe (line 281, column 1 - line 281, column 46): " + [ v.constructor.name ]);
      };
  };
  var applyMaybe = new Control_Apply.Apply(function () {
      return functorMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return Data_Functor.map(functorMaybe)(v.value0)(v1);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe (line 68, column 1 - line 70, column 30): " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var applicativeMaybe = new Control_Applicative.Applicative(function () {
      return applyMaybe;
  }, Just.create);
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["maybe"] = maybe;
  exports["isJust"] = isJust;
  exports["fromJust"] = fromJust;
  exports["applicativeMaybe"] = applicativeMaybe;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Monoid"] = $PS["Data.Monoid"] || {};
  var exports = $PS["Data.Monoid"];
  var mempty = function (dict) {
      return dict.mempty;
  };
  exports["mempty"] = mempty;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Semigroup"] = $PS["Data.Semigroup"] || {};
  var exports = $PS["Data.Semigroup"];
  var Semigroup = function (append) {
      this.append = append;
  };
  var append = function (dict) {
      return dict.append;
  };
  exports["Semigroup"] = Semigroup;
  exports["append"] = append;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Foldable"] = $PS["Data.Foldable"] || {};
  var exports = $PS["Data.Foldable"];
  var $foreign = $PS["Data.Foldable"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Function = $PS["Data.Function"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Unit = $PS["Data.Unit"];                
  var Foldable = function (foldMap, foldl, foldr) {
      this.foldMap = foldMap;
      this.foldl = foldl;
      this.foldr = foldr;
  };
  var foldr = function (dict) {
      return dict.foldr;
  };
  var traverse_ = function (dictApplicative) {
      return function (dictFoldable) {
          return function (f) {
              return foldr(dictFoldable)((function () {
                  var $311 = Control_Apply.applySecond(dictApplicative.Apply0());
                  return function ($312) {
                      return $311(f($312));
                  };
              })())(Control_Applicative.pure(dictApplicative)(Data_Unit.unit));
          };
      };
  };
  var for_ = function (dictApplicative) {
      return function (dictFoldable) {
          return Data_Function.flip(traverse_(dictApplicative)(dictFoldable));
      };
  };
  var foldl = function (dict) {
      return dict.foldl;
  }; 
  var foldableMaybe = new Foldable(function (dictMonoid) {
      return function (f) {
          return function (v) {
              if (v instanceof Data_Maybe.Nothing) {
                  return Data_Monoid.mempty(dictMonoid);
              };
              if (v instanceof Data_Maybe.Just) {
                  return f(v.value0);
              };
              throw new Error("Failed pattern match at Data.Foldable (line 138, column 1 - line 144, column 27): " + [ f.constructor.name, v.constructor.name ]);
          };
      };
  }, function (v) {
      return function (z) {
          return function (v1) {
              if (v1 instanceof Data_Maybe.Nothing) {
                  return z;
              };
              if (v1 instanceof Data_Maybe.Just) {
                  return v(z)(v1.value0);
              };
              throw new Error("Failed pattern match at Data.Foldable (line 138, column 1 - line 144, column 27): " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
          };
      };
  }, function (v) {
      return function (z) {
          return function (v1) {
              if (v1 instanceof Data_Maybe.Nothing) {
                  return z;
              };
              if (v1 instanceof Data_Maybe.Just) {
                  return v(v1.value0)(z);
              };
              throw new Error("Failed pattern match at Data.Foldable (line 138, column 1 - line 144, column 27): " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
          };
      };
  });
  var foldMapDefaultR = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return foldr(dictFoldable)(function (x) {
                  return function (acc) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(f(x))(acc);
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      };
  };
  var foldableArray = new Foldable(function (dictMonoid) {
      return foldMapDefaultR(foldableArray)(dictMonoid);
  }, $foreign.foldlArray, $foreign.foldrArray);
  exports["Foldable"] = Foldable;
  exports["foldr"] = foldr;
  exports["foldl"] = foldl;
  exports["for_"] = for_;
  exports["foldableArray"] = foldableArray;
  exports["foldableMaybe"] = foldableMaybe;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Traversable"] = $PS["Data.Traversable"] || {};
  var exports = $PS["Data.Traversable"];
  var $foreign = $PS["Data.Traversable"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];            
  var Traversable = function (Foldable1, Functor0, sequence, traverse) {
      this.Foldable1 = Foldable1;
      this.Functor0 = Functor0;
      this.sequence = sequence;
      this.traverse = traverse;
  };
  var traverse = function (dict) {
      return dict.traverse;
  }; 
  var sequenceDefault = function (dictTraversable) {
      return function (dictApplicative) {
          return traverse(dictTraversable)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  var traversableArray = new Traversable(function () {
      return Data_Foldable.foldableArray;
  }, function () {
      return Data_Functor.functorArray;
  }, function (dictApplicative) {
      return sequenceDefault(traversableArray)(dictApplicative);
  }, function (dictApplicative) {
      return $foreign.traverseArrayImpl(Control_Apply.apply(dictApplicative.Apply0()))(Data_Functor.map((dictApplicative.Apply0()).Functor0()))(Control_Applicative.pure(dictApplicative));
  });
  exports["traverse"] = traverse;
  exports["traversableArray"] = traversableArray;
})(PS);
(function(exports) {
  "use strict";

  exports.typeOf = function (value) {
    return typeof value;
  };

  exports.tagOf = function (value) {
    return Object.prototype.toString.call(value).slice(8, -1);
  };

  exports.isNull = function (value) {
    return value === null;
  };

  exports.isUndefined = function (value) {
    return value === undefined;
  };

  exports.isArray = Array.isArray || function (value) {
    return Object.prototype.toString.call(value) === "[object Array]";
  };
})(PS["Foreign"] = PS["Foreign"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Boolean"] = $PS["Data.Boolean"] || {};
  var exports = $PS["Data.Boolean"];
  var otherwise = true;
  exports["otherwise"] = otherwise;
})(PS);
(function(exports) {
  "use strict";

  exports.fromNumberImpl = function (just) {
    return function (nothing) {
      return function (n) {
        /* jshint bitwise: false */
        return (n | 0) === n ? just(n) : nothing;
      };
    };
  };
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Int"] = $PS["Data.Int"] || {};
  var exports = $PS["Data.Int"];
  var $foreign = $PS["Data.Int"];
  var Data_Maybe = $PS["Data.Maybe"];
  var fromNumber = $foreign.fromNumberImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  exports["fromNumber"] = fromNumber;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Control.Alt"] = $PS["Control.Alt"] || {};
  var exports = $PS["Control.Alt"];                          
  var Alt = function (Functor0, alt) {
      this.Functor0 = Functor0;
      this.alt = alt;
  };
  exports["Alt"] = Alt;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Control.Plus"] = $PS["Control.Plus"] || {};
  var exports = $PS["Control.Plus"];                     
  var Plus = function (Alt0, empty) {
      this.Alt0 = Alt0;
      this.empty = empty;
  };       
  var empty = function (dict) {
      return dict.empty;
  };
  exports["Plus"] = Plus;
  exports["empty"] = empty;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.List.Types"] = $PS["Data.List.Types"] || {};
  var exports = $PS["Data.List.Types"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Plus = $PS["Control.Plus"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];                    
  var Nil = (function () {
      function Nil() {

      };
      Nil.value = new Nil();
      return Nil;
  })();
  var Cons = (function () {
      function Cons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Cons.create = function (value0) {
          return function (value1) {
              return new Cons(value0, value1);
          };
      };
      return Cons;
  })();
  var NonEmptyList = function (x) {
      return x;
  };
  var listMap = function (f) {
      var chunkedRevMap = function ($copy_chunksAcc) {
          return function ($copy_v) {
              var $tco_var_chunksAcc = $copy_chunksAcc;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(chunksAcc, v) {
                  if (v instanceof Cons && (v.value1 instanceof Cons && v.value1.value1 instanceof Cons)) {
                      $tco_var_chunksAcc = new Cons(v, chunksAcc);
                      $copy_v = v.value1.value1.value1;
                      return;
                  };
                  var unrolledMap = function (v1) {
                      if (v1 instanceof Cons && (v1.value1 instanceof Cons && v1.value1.value1 instanceof Nil)) {
                          return new Cons(f(v1.value0), new Cons(f(v1.value1.value0), Nil.value));
                      };
                      if (v1 instanceof Cons && v1.value1 instanceof Nil) {
                          return new Cons(f(v1.value0), Nil.value);
                      };
                      return Nil.value;
                  };
                  var reverseUnrolledMap = function ($copy_v1) {
                      return function ($copy_acc) {
                          var $tco_var_v1 = $copy_v1;
                          var $tco_done1 = false;
                          var $tco_result;
                          function $tco_loop(v1, acc) {
                              if (v1 instanceof Cons && (v1.value0 instanceof Cons && (v1.value0.value1 instanceof Cons && v1.value0.value1.value1 instanceof Cons))) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_acc = new Cons(f(v1.value0.value0), new Cons(f(v1.value0.value1.value0), new Cons(f(v1.value0.value1.value1.value0), acc)));
                                  return;
                              };
                              $tco_done1 = true;
                              return acc;
                          };
                          while (!$tco_done1) {
                              $tco_result = $tco_loop($tco_var_v1, $copy_acc);
                          };
                          return $tco_result;
                      };
                  };
                  $tco_done = true;
                  return reverseUnrolledMap(chunksAcc)(unrolledMap(v));
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_chunksAcc, $copy_v);
              };
              return $tco_result;
          };
      };
      return chunkedRevMap(Nil.value);
  };
  var functorList = new Data_Functor.Functor(listMap);                 
  var foldableList = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return Data_Foldable.foldl(foldableList)(function (acc) {
              var $204 = Data_Semigroup.append(dictMonoid.Semigroup0())(acc);
              return function ($205) {
                  return $204(f($205));
              };
          })(Data_Monoid.mempty(dictMonoid));
      };
  }, function (f) {
      var go = function ($copy_b) {
          return function ($copy_v) {
              var $tco_var_b = $copy_b;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(b, v) {
                  if (v instanceof Nil) {
                      $tco_done = true;
                      return b;
                  };
                  if (v instanceof Cons) {
                      $tco_var_b = f(b)(v.value0);
                      $copy_v = v.value1;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.List.Types (line 112, column 12 - line 114, column 30): " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_b, $copy_v);
              };
              return $tco_result;
          };
      };
      return go;
  }, function (f) {
      return function (b) {
          var rev = (function () {
              var go = function ($copy_acc) {
                  return function ($copy_v) {
                      var $tco_var_acc = $copy_acc;
                      var $tco_done1 = false;
                      var $tco_result;
                      function $tco_loop(acc, v) {
                          if (v instanceof Nil) {
                              $tco_done1 = true;
                              return acc;
                          };
                          if (v instanceof Cons) {
                              $tco_var_acc = new Cons(v.value0, acc);
                              $copy_v = v.value1;
                              return;
                          };
                          throw new Error("Failed pattern match at Data.List.Types (line 108, column 7 - line 108, column 23): " + [ acc.constructor.name, v.constructor.name ]);
                      };
                      while (!$tco_done1) {
                          $tco_result = $tco_loop($tco_var_acc, $copy_v);
                      };
                      return $tco_result;
                  };
              };
              return go(Nil.value);
          })();
          var $206 = Data_Foldable.foldl(foldableList)(Data_Function.flip(f))(b);
          return function ($207) {
              return $206(rev($207));
          };
      };
  });
  var semigroupList = new Data_Semigroup.Semigroup(function (xs) {
      return function (ys) {
          return Data_Foldable.foldr(foldableList)(Cons.create)(ys)(xs);
      };
  });                                              
  var altList = new Control_Alt.Alt(function () {
      return functorList;
  }, Data_Semigroup.append(semigroupList));
  var plusList = new Control_Plus.Plus(function () {
      return altList;
  }, Nil.value);
  exports["NonEmptyList"] = NonEmptyList;
  exports["plusList"] = plusList;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.NonEmpty"] = $PS["Data.NonEmpty"] || {};
  var exports = $PS["Data.NonEmpty"];
  var Control_Plus = $PS["Control.Plus"];                        
  var NonEmpty = (function () {
      function NonEmpty(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      NonEmpty.create = function (value0) {
          return function (value1) {
              return new NonEmpty(value0, value1);
          };
      };
      return NonEmpty;
  })();
  var singleton = function (dictPlus) {
      return function (a) {
          return new NonEmpty(a, Control_Plus.empty(dictPlus));
      };
  };
  exports["singleton"] = singleton;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.List.NonEmpty"] = $PS["Data.List.NonEmpty"] || {};
  var exports = $PS["Data.List.NonEmpty"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_NonEmpty = $PS["Data.NonEmpty"];
  var singleton = (function () {
      var $172 = Data_NonEmpty.singleton(Data_List_Types.plusList);
      return function ($173) {
          return Data_List_Types.NonEmptyList($172($173));
      };
  })();
  exports["singleton"] = singleton;
})(PS);
(function(exports) {
  "use strict";

  // module Unsafe.Coerce

  exports.unsafeCoerce = function (x) {
    return x;
  };
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Unsafe.Coerce"] = $PS["Unsafe.Coerce"] || {};
  var exports = $PS["Unsafe.Coerce"];
  var $foreign = $PS["Unsafe.Coerce"];
  exports["unsafeCoerce"] = $foreign.unsafeCoerce;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Foreign"] = $PS["Foreign"] || {};
  var exports = $PS["Foreign"];
  var $foreign = $PS["Foreign"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Either = $PS["Data.Either"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Int = $PS["Data.Int"];
  var Data_List_NonEmpty = $PS["Data.List.NonEmpty"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var TypeMismatch = (function () {
      function TypeMismatch(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      TypeMismatch.create = function (value0) {
          return function (value1) {
              return new TypeMismatch(value0, value1);
          };
      };
      return TypeMismatch;
  })();
  var ErrorAtProperty = (function () {
      function ErrorAtProperty(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ErrorAtProperty.create = function (value0) {
          return function (value1) {
              return new ErrorAtProperty(value0, value1);
          };
      };
      return ErrorAtProperty;
  })();                                            
  var unsafeFromForeign = Unsafe_Coerce.unsafeCoerce;
  var fail = function (dictMonad) {
      var $118 = Control_Monad_Error_Class.throwError(Control_Monad_Except_Trans.monadThrowExceptT(dictMonad));
      return function ($119) {
          return $118(Data_List_NonEmpty.singleton($119));
      };
  };
  var readArray = function (dictMonad) {
      return function (value) {
          if ($foreign.isArray(value)) {
              return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(dictMonad))(unsafeFromForeign(value));
          };
          if (Data_Boolean.otherwise) {
              return fail(dictMonad)(new TypeMismatch("array", $foreign.tagOf(value)));
          };
          throw new Error("Failed pattern match at Foreign (line 151, column 1 - line 151, column 66): " + [ value.constructor.name ]);
      };
  };
  var unsafeReadTagged = function (dictMonad) {
      return function (tag) {
          return function (value) {
              if ($foreign.tagOf(value) === tag) {
                  return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(dictMonad))(unsafeFromForeign(value));
              };
              if (Data_Boolean.otherwise) {
                  return fail(dictMonad)(new TypeMismatch(tag, $foreign.tagOf(value)));
              };
              throw new Error("Failed pattern match at Foreign (line 110, column 1 - line 110, column 71): " + [ tag.constructor.name, value.constructor.name ]);
          };
      };
  };
  var readNumber = function (dictMonad) {
      return unsafeReadTagged(dictMonad)("Number");
  };
  var readInt = function (dictMonad) {
      return function (value) {
          var error = Data_Either.Left.create(Data_List_NonEmpty.singleton(new TypeMismatch("Int", $foreign.tagOf(value))));
          var fromNumber = (function () {
              var $120 = Data_Maybe.maybe(error)(Control_Applicative.pure(Data_Either.applicativeEither));
              return function ($121) {
                  return $120(Data_Int.fromNumber($121));
              };
          })();
          return Control_Monad_Except_Trans.mapExceptT(Data_Functor.map(((dictMonad.Bind1()).Apply0()).Functor0())(Data_Either.either(Data_Function["const"](error))(fromNumber)))(readNumber(dictMonad)(value));
      };
  };
  var readString = function (dictMonad) {
      return unsafeReadTagged(dictMonad)("String");
  };
  exports["TypeMismatch"] = TypeMismatch;
  exports["ErrorAtProperty"] = ErrorAtProperty;
  exports["readString"] = readString;
  exports["readInt"] = readInt;
  exports["readArray"] = readArray;
  exports["fail"] = fail;
  exports["typeOf"] = $foreign.typeOf;
  exports["isNull"] = $foreign.isNull;
  exports["isUndefined"] = $foreign.isUndefined;
})(PS);
(function(exports) {
  "use strict";

  exports.unsafeReadPropImpl = function (f, s, key, value) {
    return value == null ? f : s(value[key]);
  };

  exports.unsafeHasOwnProperty = function (prop, value) {
    return Object.prototype.hasOwnProperty.call(value, prop);
  };

  exports.unsafeHasProperty = function (prop, value) {
    return prop in value;
  };
})(PS["Foreign.Index"] = PS["Foreign.Index"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Foreign.Index"] = $PS["Foreign.Index"] || {};
  var exports = $PS["Foreign.Index"];
  var $foreign = $PS["Foreign.Index"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Data_Function = $PS["Data.Function"];
  var Foreign = $PS["Foreign"];                
  var Index = function (errorAt, hasOwnProperty, hasProperty, index) {
      this.errorAt = errorAt;
      this.hasOwnProperty = hasOwnProperty;
      this.hasProperty = hasProperty;
      this.index = index;
  };
  var Indexable = function (ix) {
      this.ix = ix;
  };
  var unsafeReadProp = function (dictMonad) {
      return function (k) {
          return function (value) {
              return $foreign.unsafeReadPropImpl(Foreign.fail(dictMonad)(new Foreign.TypeMismatch("object", Foreign.typeOf(value))), Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(dictMonad)), k, value);
          };
      };
  };
  var readProp = function (dictMonad) {
      return unsafeReadProp(dictMonad);
  };
  var ix = function (dict) {
      return dict.ix;
  };
  var index = function (dict) {
      return dict.index;
  };
  var indexableForeign = function (dictMonad) {
      return new Indexable(function (dictIndex) {
          return index(dictIndex);
      });
  };
  var hasPropertyImpl = function (v) {
      return function (value) {
          if (Foreign.isNull(value)) {
              return false;
          };
          if (Foreign.isUndefined(value)) {
              return false;
          };
          if (Foreign.typeOf(value) === "object" || Foreign.typeOf(value) === "function") {
              return $foreign.unsafeHasProperty(v, value);
          };
          return false;
      };
  };
  var hasOwnPropertyImpl = function (v) {
      return function (value) {
          if (Foreign.isNull(value)) {
              return false;
          };
          if (Foreign.isUndefined(value)) {
              return false;
          };
          if (Foreign.typeOf(value) === "object" || Foreign.typeOf(value) === "function") {
              return $foreign.unsafeHasOwnProperty(v, value);
          };
          return false;
      };
  };
  var indexString = function (dictMonad) {
      return new Index(Foreign.ErrorAtProperty.create, hasOwnPropertyImpl, hasPropertyImpl, Data_Function.flip(readProp(dictMonad)));
  };
  exports["ix"] = ix;
  exports["indexString"] = indexString;
  exports["indexableForeign"] = indexableForeign;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Ace.Types"] = $PS["Ace.Types"] || {};
  var exports = $PS["Ace.Types"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Foreign = $PS["Foreign"];
  var Foreign_Index = $PS["Foreign.Index"];
  var Windows = (function () {
      function Windows() {

      };
      Windows.value = new Windows();
      return Windows;
  })();
  var Unix = (function () {
      function Unix() {

      };
      Unix.value = new Unix();
      return Unix;
  })();
  var Auto = (function () {
      function Auto() {

      };
      Auto.value = new Auto();
      return Auto;
  })();
  var Insert = (function () {
      function Insert() {

      };
      Insert.value = new Insert();
      return Insert;
  })();
  var Remove = (function () {
      function Remove() {

      };
      Remove.value = new Remove();
      return Remove;
  })();
  var Null = (function () {
      function Null() {

      };
      Null.value = new Null();
      return Null;
  })();
  var InsertText = (function () {
      function InsertText() {

      };
      InsertText.value = new InsertText();
      return InsertText;
  })();
  var showNewlineMode = function (v) {
      if (v instanceof Windows) {
          return "windows";
      };
      if (v instanceof Unix) {
          return "unix";
      };
      if (v instanceof Auto) {
          return "auto";
      };
      throw new Error("Failed pattern match at Ace.Types (line 49, column 1 - line 49, column 41): " + [ v.constructor.name ]);
  };
  var showDocumentEventType = function (v) {
      if (v instanceof Insert) {
          return "insert";
      };
      if (v instanceof Remove) {
          return "remove";
      };
      throw new Error("Failed pattern match at Ace.Types (line 18, column 1 - line 18, column 53): " + [ v.constructor.name ]);
  };
  var readPosition = function (e) {
      return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Foreign_Index.ix(Foreign_Index.indexableForeign(Data_Identity.monadIdentity))(Foreign_Index.indexString(Data_Identity.monadIdentity))(e)("row"))(Foreign.readInt(Data_Identity.monadIdentity)))(function (row) {
          return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Foreign_Index.ix(Foreign_Index.indexableForeign(Data_Identity.monadIdentity))(Foreign_Index.indexString(Data_Identity.monadIdentity))(e)("column"))(Foreign.readInt(Data_Identity.monadIdentity)))(function (column) {
              return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))({
                  row: row,
                  column: column
              });
          });
      });
  };
  var readDocumentEventType = function (v) {
      if (v === "insert") {
          return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(Insert.value);
      };
      if (v === "remove") {
          return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(Remove.value);
      };
      return Foreign.fail(Data_Identity.monadIdentity)(new Foreign.TypeMismatch("'" + (v + "'"), " a valid value for the DocumentEventType enum"));
  };
  var readDocumentEvent = function (e) {
      return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Foreign_Index.ix(Foreign_Index.indexableForeign(Data_Identity.monadIdentity))(Foreign_Index.indexString(Data_Identity.monadIdentity))(e)("action"))(Foreign.readString(Data_Identity.monadIdentity)))(readDocumentEventType))(function (action) {
          return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Foreign_Index.ix(Foreign_Index.indexableForeign(Data_Identity.monadIdentity))(Foreign_Index.indexString(Data_Identity.monadIdentity))(e)("start"))(readPosition))(function (start) {
              return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Foreign_Index.ix(Foreign_Index.indexableForeign(Data_Identity.monadIdentity))(Foreign_Index.indexString(Data_Identity.monadIdentity))(e)("end"))(readPosition))(function (end) {
                  return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Foreign_Index.ix(Foreign_Index.indexableForeign(Data_Identity.monadIdentity))(Foreign_Index.indexString(Data_Identity.monadIdentity))(e)("lines"))(Foreign.readArray(Data_Identity.monadIdentity)))(Data_Traversable.traverse(Data_Traversable.traversableArray)(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(Foreign.readString(Data_Identity.monadIdentity))))(function (lines) {
                      return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))({
                          action: action,
                          start: start,
                          end: end,
                          lines: lines
                      });
                  });
              });
          });
      });
  };
  var getRow = function (v) {
      return v.row;
  };
  var getColumn = function (v) {
      return v.column;
  };
  exports["showDocumentEventType"] = showDocumentEventType;
  exports["readDocumentEvent"] = readDocumentEvent;
  exports["Windows"] = Windows;
  exports["showNewlineMode"] = showNewlineMode;
  exports["getRow"] = getRow;
  exports["getColumn"] = getColumn;
  exports["Null"] = Null;
  exports["InsertText"] = InsertText;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Ace.Command"] = $PS["Ace.Command"] || {};
  var exports = $PS["Ace.Command"];
  var Ace_Types = $PS["Ace.Types"];                
  var commandToString = function (v) {
      if (v instanceof Ace_Types.Null) {
          return "null";
      };
      if (v instanceof Ace_Types.InsertText) {
          return "inserttext";
      };
      throw new Error("Failed pattern match at Ace.Command (line 5, column 1 - line 5, column 37): " + [ v.constructor.name ]);
  };
  exports["commandToString"] = commandToString;
})(PS);
(function(exports) {
  "use strict";

  exports.setImpl = function (key, value) {
    return function () {
      ace.config.set(key, value);
      return ace;
    };
  };
})(PS["Ace.Config"] = PS["Ace.Config"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Ace.Config"] = $PS["Ace.Config"] || {};
  var exports = $PS["Ace.Config"];
  var $foreign = $PS["Ace.Config"];
  var set = function (key) {
      return function (value) {
          return $foreign.setImpl(key, value);
      };
  };                        
  var basePath = "basePath";
  exports["set"] = set;
  exports["basePath"] = basePath;
})(PS);
(function(exports) {
  "use strict";

  exports.onChangeImpl = function (self, fn) {
    return function () {
      return self.on("change", function (e) {
        fn(e)();
      });
    };
  };

  exports.getValue = function (self) {
    return function () {
      return self.getValue();
    };
  };

  exports.createAnchorImpl = function (row, column, self) {
    return function () {
      return self.createAnchor(row, column);
    };
  };

  exports.getNewLineCharacter = function (self) {
    return function () {
      return self.getNewLineCharacter();
    };
  };

  exports.setNewLineModeImpl = function (newLineMode, self) {
    return function () {
      return self.setNewLineMode(newLineMode);
    };
  };

  exports.getNewLineMode = function (self) {
    return function () {
      return self.getNewLineMode();
    };
  };

  exports.isNewLineImpl = function (text, self) {
    return function () {
      return self.isNewLine(text);
    };
  };

  exports.getLineImpl = function (row, self) {
    return function () {
      return self.getLine(row);
    };
  };

  exports.getLinesImpl = function (firstRow, lastRow, self) {
    return function () {
      return self.getLines(firstRow, lastRow);
    };
  };

  exports.getAllLines = function (self) {
    return function () {
      return self.getAllLines();
    };
  };

  exports.getLength = function (self) {
    return function () {
      return self.getLength();
    };
  };

  exports.getTextRangeImpl = function (range, self) {
    return function () {
      return self.getTextRange(range);
    };
  };

  exports.insertImpl = function (position, text, self) {
    return function () {
      self.insert(position, text);
    };
  };

  exports.insertNewLineImpl = function (position, self) {
    return function () {
      return self.insertNewLine(position);
    };
  };

  exports.removeImpl = function (range, self) {
    return function () {
      return self.remove(range);
    };
  };

  exports.removeInLineImpl = function (row, startColumn, endColumn, self) {
    return function () {
      return self.removeInLine(row, startColumn, endColumn);
    };
  };

  exports.removeLinesImpl = function (firstRow, lastRow, self) {
    return function () {
      return self.removeLines(firstRow, lastRow);
    };
  };

  exports.removeNewLineImpl = function (row, self) {
    return function () {
      return self.removeNewLine(row);
    };
  };

  exports.replaceImpl = function (range, text, self) {
    return function () {
      return self.replace(range, text);
    };
  };

  exports.indexToPositionImpl = function (index, startRow, self) {
    return function () {
      return self.indexToPosition(index, startRow);
    };
  };

  exports.positionToIndexImpl = function (pos, startRow, self) {
    return function () {
      return self.positionToIndex(pos, startRow);
    };
  };
})(PS["Ace.Document"] = PS["Ace.Document"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Safe.Coerce"] = $PS["Safe.Coerce"] || {};
  var exports = $PS["Safe.Coerce"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                
  var coerce = function (dictCoercible) {
      return Unsafe_Coerce.unsafeCoerce;
  };
  exports["coerce"] = coerce;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Newtype"] = $PS["Data.Newtype"] || {};
  var exports = $PS["Data.Newtype"];
  var Safe_Coerce = $PS["Safe.Coerce"];
  var unwrap = function (dictNewtype) {
      return Safe_Coerce.coerce();
  };
  exports["unwrap"] = unwrap;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Control.Monad.Except"] = $PS["Control.Monad.Except"] || {};
  var exports = $PS["Control.Monad.Except"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Data_Newtype = $PS["Data.Newtype"];                                                
  var runExcept = (function () {
      var $0 = Data_Newtype.unwrap();
      return function ($1) {
          return $0(Control_Monad_Except_Trans.runExceptT($1));
      };
  })();
  exports["runExcept"] = runExcept;
})(PS);
(function(exports) {
  "use strict";

  // module Partial.Unsafe

  exports._unsafePartial = function (f) {
    return f();
  };
})(PS["Partial.Unsafe"] = PS["Partial.Unsafe"] || {});
(function(exports) {
  "use strict";

  // module Partial

  exports._crashWith = function (msg) {
    throw new Error(msg);
  };
})(PS["Partial"] = PS["Partial"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Partial"] = $PS["Partial"] || {};
  var exports = $PS["Partial"];
  var $foreign = $PS["Partial"];         
  var crashWith = function (dictPartial) {
      return $foreign["_crashWith"];
  };
  exports["crashWith"] = crashWith;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Partial.Unsafe"] = $PS["Partial.Unsafe"] || {};
  var exports = $PS["Partial.Unsafe"];
  var $foreign = $PS["Partial.Unsafe"];
  var Partial = $PS["Partial"];                
  var unsafePartial = $foreign["_unsafePartial"];
  var unsafeCrashWith = function (msg) {
      return unsafePartial(function (dictPartial) {
          return Partial.crashWith()(msg);
      });
  };
  exports["unsafeCrashWith"] = unsafeCrashWith;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Ace.Document"] = $PS["Ace.Document"] || {};
  var exports = $PS["Ace.Document"];
  var $foreign = $PS["Ace.Document"];
  var Ace_Types = $PS["Ace.Types"];
  var Control_Category = $PS["Control.Category"];
  var Control_Monad_Except = $PS["Control.Monad.Except"];
  var Data_Either = $PS["Data.Either"];
  var Partial_Unsafe = $PS["Partial.Unsafe"];
  var setNewLineMode = function (newLineMode) {
      return function (self) {
          return $foreign.setNewLineModeImpl(Ace_Types.showNewlineMode(newLineMode), self);
      };
  };
  var replace = function (range) {
      return function (text) {
          return function (self) {
              return $foreign.replaceImpl(range, text, self);
          };
      };
  };
  var removeNewLine = function (row) {
      return function (self) {
          return $foreign.removeNewLineImpl(row, self);
      };
  };
  var removeLines = function (firstRow) {
      return function (lastRow) {
          return function (self) {
              return $foreign.removeLinesImpl(firstRow, lastRow, self);
          };
      };
  };
  var removeInLine = function (row) {
      return function (startColumn) {
          return function (endColumn) {
              return function (self) {
                  return $foreign.removeInLineImpl(row, startColumn, endColumn, self);
              };
          };
      };
  };
  var remove = function (range) {
      return function (self) {
          return $foreign.removeImpl(range, self);
      };
  };
  var positionToIndex = function (pos) {
      return function (startRow) {
          return function (self) {
              return $foreign.positionToIndexImpl(pos, startRow, self);
          };
      };
  };
  var onChange = function (self) {
      return function (fn) {
          var fromRight = Data_Either.either(function (v) {
              return Partial_Unsafe.unsafeCrashWith("Expected Left in Ace.Document.onChange");
          })(Control_Category.identity(Control_Category.categoryFn));
          return $foreign.onChangeImpl(self, function ($1) {
              return fn(fromRight(Control_Monad_Except.runExcept(Ace_Types.readDocumentEvent($1))));
          });
      };
  };
  var isNewLine = function (text) {
      return function (self) {
          return $foreign.isNewLineImpl(text, self);
      };
  };
  var insertNewLine = function (position) {
      return function (self) {
          return $foreign.insertNewLineImpl(position, self);
      };
  };
  var insert = function (position) {
      return function (text) {
          return function (self) {
              return $foreign.insertImpl(position, text, self);
          };
      };
  };
  var indexToPosition = function (index) {
      return function (startRow) {
          return function (self) {
              return $foreign.indexToPositionImpl(index, startRow, self);
          };
      };
  };
  var getTextRange = function (range) {
      return function (self) {
          return $foreign.getTextRangeImpl(range, self);
      };
  };
  var getLines = function (firstRow) {
      return function (lastRow) {
          return function (self) {
              return $foreign.getLinesImpl(firstRow, lastRow, self);
          };
      };
  };
  var getLine = function (row) {
      return function (self) {
          return $foreign.getLineImpl(row, self);
      };
  };
  var createAnchor = function (row) {
      return function (column) {
          return function (self) {
              return $foreign.createAnchorImpl(row, column, self);
          };
      };
  };
  exports["onChange"] = onChange;
  exports["createAnchor"] = createAnchor;
  exports["setNewLineMode"] = setNewLineMode;
  exports["isNewLine"] = isNewLine;
  exports["getLine"] = getLine;
  exports["getLines"] = getLines;
  exports["getTextRange"] = getTextRange;
  exports["insert"] = insert;
  exports["insertNewLine"] = insertNewLine;
  exports["remove"] = remove;
  exports["removeInLine"] = removeInLine;
  exports["removeNewLine"] = removeNewLine;
  exports["removeLines"] = removeLines;
  exports["replace"] = replace;
  exports["indexToPosition"] = indexToPosition;
  exports["positionToIndex"] = positionToIndex;
  exports["getValue"] = $foreign.getValue;
  exports["getNewLineCharacter"] = $foreign.getNewLineCharacter;
  exports["getNewLineMode"] = $foreign.getNewLineMode;
  exports["getAllLines"] = $foreign.getAllLines;
  exports["getLength"] = $foreign.getLength;
})(PS);
(function(exports) {
  "use strict";

  exports.getBackgroundTokenizer = function (value) {
    return function () {
      return value.bgTokenizer;
    };
  };

  exports.findMatchingBracketImpl = function (position, self) {
    return function () {
      return self.findMatchingBracket(position);
    };
  };

  exports.addFoldImpl = function (text, range, self) {
    return function () {
      return self.addFold(text, range);
    };
  };

  exports.screenToDocumentColumnImpl = function (row, column, self) {
    return function () {
      return self.screenToDocumentColumn(row, column);
    };
  };

  exports.highlightImpl = function (text, self) {
    return function () {
      return self.highlight(text);
    };
  };

  exports.setDocumentImpl = function (doc, self) {
    return function () {
      return self.setDocument(doc);
    };
  };

  exports.getDocument = function (self) {
    return function () {
      return self.getDocument();
    };
  };

  exports.resetRowCacheImpl = function (row, self) {
    return function () {
      return self.$resetRowCache(row);
    };
  };

  exports.setValueImpl = function (text, self) {
    return function () {
      return self.setValue(text);
    };
  };

  exports.setModeImpl = function (mode, self) {
    return function () {
      return self.setMode(mode);
    };
  };

  exports.getValue = function (self) {
    return function () {
      return self.getValue();
    };
  };

  exports.getSelection = function (self) {
    return function () {
      return self.getSelection();
    };
  };

  exports.getStateImpl = function (row, self) {
    return function () {
      return self.getState(row);
    };
  };

  exports.getTokensImpl = function (row, self) {
    return function () {
      return self.getTokens(row);
    };
  };

  exports.getTokenAtImpl = function (row, column, self) {
    return function () {
      return self.getTokenAt(row, column);
    };
  };

  exports.setUndoManagerImpl = function (undoManager, self) {
    return function () {
      return self.setUndoManager(undoManager);
    };
  };

  exports.getUndoManager = function (self) {
    return function () {
      return self.getUndoManager();
    };
  };

  exports.getTabString = function (self) {
    return function () {
      return self.getTabString();
    };
  };

  exports.setUseSoftTabsImpl = function (useSoftTabs, self) {
    return function () {
      return self.setUseSoftTabs(useSoftTabs);
    };
  };

  exports.getUseSoftTabs = function (self) {
    return function () {
      return self.getUseSoftTabs();
    };
  };

  exports.setTabSizeImpl = function (tabSize, self) {
    return function () {
      return self.setTabSize(tabSize);
    };
  };

  exports.getTabSize = function (self) {
    return function () {
      return self.getTabSize();
    };
  };

  exports.setOverwriteImpl = function (overwrite, self) {
    return function () {
      return self.setOverwrite(overwrite);
    };
  };

  exports.getOverwrite = function (self) {
    return function () {
      return self.getOverwrite();
    };
  };

  exports.toggleOverwrite = function (self) {
    return function () {
      return self.toggleOverwrite();
    };
  };

  exports.addGutterDecorationImpl = function (row, className, self) {
    return function () {
      return self.addGutterDecoration(row, className);
    };
  };

  exports.removeGutterDecorationImpl = function (row, className, self) {
    return function () {
      return self.removeGutterDecoration(row, className);
    };
  };

  exports.getBreakpoints = function (self) {
    return function () {
      return self.getBreakpoints();
    };
  };

  exports.setBreakpointsImpl = function (rows, self) {
    return function () {
      return self.setBreakpoints(rows);
    };
  };

  exports.clearBreakpoints = function (self) {
    return function () {
      return self.clearBreakpoints();
    };
  };

  exports.setBreakpointImpl = function (row, className, self) {
    return function () {
      return self.setBreakpoint(row, className);
    };
  };

  exports.clearBreakpointImpl = function (row, self) {
    return function () {
      return self.clearBreakpoint(row);
    };
  };

  exports.addMarkerImpl = function (range, clazz, type, inFront, self) {
    return function () {
      return self.addMarker(range, clazz, type, inFront);
    };
  };

  exports.addDynamicMarkerImpl = function (marker, inFront, self) {
    return function () {
      return self.addDynamicMarker(
        {
          update: function (html, layer) {
            marker(html)(layer.element)();
          },
        },
        inFront
      );
    };
  };

  exports.removeMarkerImpl = function (markerId, self) {
    return function () {
      return self.removeMarker(markerId);
    };
  };

  exports.setAnnotationsImpl = function (annotations, self) {
    return function () {
      return self.setAnnotations(annotations);
    };
  };

  exports.getAnnotations = function (self) {
    return function () {
      return self.getAnnotations();
    };
  };

  exports.clearAnnotations = function (self) {
    return function () {
      return self.clearAnnotations();
    };
  };

  exports.detectNewLineImpl = function (text, self) {
    return function () {
      return self.$detectNewLine(text);
    };
  };

  exports.getWordRangeImpl = function (row, column, self) {
    return function () {
      return self.getWordRange(row, column);
    };
  };

  exports.getAWordRangeImpl = function (row, column, self) {
    return function () {
      return self.getAWordRange(row, column);
    };
  };

  exports.setNewLineModeImpl = function (newLineMode, self) {
    return function () {
      return self.setNewLineMode(newLineMode);
    };
  };

  exports.getNewLineMode = function (self) {
    return function () {
      return self.getNewLineMode();
    };
  };

  exports.setUseWorkerImpl = function (useWorker, self) {
    return function () {
      return self.setUseWorker(useWorker);
    };
  };

  exports.getUseWorker = function (self) {
    return function () {
      return self.getUseWorker();
    };
  };

  exports.getMode = function (self) {
    return function () {
      return self.getMode();
    };
  };

  exports.setScrollTopImpl = function (scrollTop, self) {
    return function () {
      return self.setScrollTop(scrollTop);
    };
  };

  exports.getScrollTop = function (self) {
    return function () {
      return self.getScrollTop();
    };
  };

  exports.setScrollLeftImpl = function (scrollLeft, self) {
    return function () {
      return self.setScrollLeft(scrollLeft);
    };
  };

  exports.getScrollLeft = function (self) {
    return function () {
      return self.getScrollLeft();
    };
  };

  exports.getScreenWidth = function (self) {
    return function () {
      return self.getScreenWidth();
    };
  };

  exports.getLineImpl = function (row, self) {
    return function () {
      return self.getLine(row);
    };
  };

  exports.getLinesImpl = function (firstRow, lastRow, self) {
    return function () {
      return self.getLines(firstRow, lastRow);
    };
  };

  exports.getLength = function (self) {
    return function () {
      return self.getLength();
    };
  };

  exports.getTextRangeImpl = function (range, self) {
    return function () {
      return self.getTextRange(range);
    };
  };

  exports.insertImpl = function (position, text, self) {
    return function () {
      return self.insert(position, text);
    };
  };

  exports.removeImpl = function (range, self) {
    return function () {
      return self.remove(range);
    };
  };

  exports.setUndoSelectImpl = function (enable, self) {
    return function () {
      return self.setUndoSelect(enable);
    };
  };

  exports.replaceImpl = function (range, text, self) {
    return function () {
      return self.replace(range, text);
    };
  };

  exports.indentRowsImpl = function (startRow, endRow, indentString, self) {
    return function () {
      return self.indentRows(startRow, endRow, indentString);
    };
  };

  exports.outdentRowsImpl = function (range, self) {
    return function () {
      return self.outdentRows(range);
    };
  };

  exports.moveLinesUpImpl = function (firstRow, lastRow, self) {
    return function () {
      return self.moveLinesUp(firstRow, lastRow);
    };
  };

  exports.moveLinesDownImpl = function (firstRow, lastRow, self) {
    return function () {
      return self.moveLinesDown(firstRow, lastRow);
    };
  };

  exports.duplicateLinesImpl = function (firstRow, lastRow, self) {
    return function () {
      return self.duplicateLines(firstRow, lastRow);
    };
  };

  exports.setUseWrapModeImpl = function (useWrapMode, self) {
    return function () {
      return self.setUseWrapMode(useWrapMode);
    };
  };

  exports.getUseWrapMode = function (self) {
    return function () {
      return self.getUseWrapMode();
    };
  };

  exports.setWrapLimitRangeImpl = function (min, max, self) {
    return function () {
      return self.setWrapLimitRange(min, max);
    };
  };

  exports.adjustWrapLimitImpl = function (desiredLimit, self) {
    return function () {
      return self.adjustWrapLimit(desiredLimit);
    };
  };

  exports.getWrapLimit = function (self) {
    return function () {
      return self.getWrapLimit();
    };
  };

  exports.getWrapLimitRange = function (self) {
    return function () {
      return self.getWrapLimitRange();
    };
  };

  exports.getDisplayTokensImpl = function (str, offset, self) {
    return function () {
      return self.$getDisplayTokens(str, offset);
    };
  };

  exports.getStringScreenWidthImpl = function (
    str,
    maxScreenColumn,
    screenColumn,
    self
  ) {
    return function () {
      return self.$getStringScreenWidth(str, maxScreenColumn, screenColumn);
    };
  };

  exports.getRowLengthImpl = function (row, self) {
    return function () {
      return self.getRowLength(row);
    };
  };

  exports.getScreenLastRowColumnImpl = function (screenRow, self) {
    return function () {
      return self.getScreenLastRowColumn(screenRow);
    };
  };

  exports.getDocumentLastRowColumnImpl = function (docRow, docColumn, self) {
    return function () {
      return self.getDocumentLastRowColumn(docRow, docColumn);
    };
  };

  exports.getDocumentLastRowColumnPositionImpl = function (
    docRow,
    docColumn,
    self
  ) {
    return function () {
      return self.getDocumentLastRowColumnPosition(docRow, docColumn);
    };
  };

  exports.getRowSplitData = function (self) {
    return function () {
      return self.getRowSplitData();
    };
  };

  exports.getScreenTabSizeImpl = function (screenColumn, self) {
    return function () {
      return self.getScreenTabSize(screenColumn);
    };
  };

  exports.screenToDocumentPositionImpl = function (
    screenRow,
    screenColumn,
    self
  ) {
    return function () {
      return self.screenToDocumentPosition(screenRow, screenColumn);
    };
  };

  exports.documentToScreenPositionImpl = function (docRow, docColumn, self) {
    return function () {
      return self.documentToScreenPosition(docRow, docColumn);
    };
  };

  exports.documentToScreenColumnImpl = function (row, docColumn, self) {
    return function () {
      return self.documentToScreenColumn(row, docColumn);
    };
  };

  exports.documentToScreenRowImpl = function (docRow, docColumn, self) {
    return function () {
      return self.documentToScreenRow(docRow, docColumn);
    };
  };

  exports.getScreenLength = function (self) {
    return function () {
      return self.getScreenLength();
    };
  };

  function create(text, mode) {
    return function () {
      var EditSession = ace.require("ace/edit_session").EditSession;
      return new EditSession(text, mode);
    };
  }
})(PS["Ace.EditSession"] = PS["Ace.EditSession"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Ace.EditSession"] = $PS["Ace.EditSession"] || {};
  var exports = $PS["Ace.EditSession"];
  var $foreign = $PS["Ace.EditSession"];                   
  var setWrapLimitRange = function (min) {
      return function (max) {
          return function (self) {
              return $foreign.setWrapLimitRangeImpl(min, max, self);
          };
      };
  };
  var setValue = function (text) {
      return function (self) {
          return $foreign.setValueImpl(text, self);
      };
  };
  var setUseWrapMode = function (useWrapMode) {
      return function (self) {
          return $foreign.setUseWrapModeImpl(useWrapMode, self);
      };
  };
  var setUseWorker = function (useWorker) {
      return function (self) {
          return $foreign.setUseWorkerImpl(useWorker, self);
      };
  };
  var setUseSoftTabs = function (useSoftTabs) {
      return function (self) {
          return $foreign.setUseSoftTabsImpl(useSoftTabs, self);
      };
  };
  var setUndoSelect = function (enable) {
      return function (self) {
          return $foreign.setUndoSelectImpl(enable, self);
      };
  };
  var setUndoManager = function (undoManager) {
      return function (self) {
          return $foreign.setUndoManagerImpl(undoManager, self);
      };
  };
  var setTabSize = function (tabSize) {
      return function (self) {
          return $foreign.setTabSizeImpl(tabSize, self);
      };
  };
  var setScrollTop = function (scrollTop) {
      return function (self) {
          return $foreign.setScrollTopImpl(scrollTop, self);
      };
  };
  var setScrollLeft = function (scrollLeft) {
      return function (self) {
          return $foreign.setScrollLeftImpl(scrollLeft, self);
      };
  };
  var setOverwrite = function (overwrite) {
      return function (self) {
          return $foreign.setOverwriteImpl(overwrite, self);
      };
  };
  var setNewLineMode = function (newLineMode) {
      return function (self) {
          return $foreign.setNewLineModeImpl(newLineMode, self);
      };
  };
  var setMode = function (mode$prime) {
      return function (self) {
          return $foreign.setModeImpl(mode$prime, self);
      };
  };
  var setDocument = function (doc) {
      return function (self) {
          return $foreign.setDocumentImpl(doc, self);
      };
  };
  var setBreakpoints = function (rows) {
      return function (self) {
          return $foreign.setBreakpointsImpl(rows, self);
      };
  };
  var setBreakpoint = function (row) {
      return function (className) {
          return function (self) {
              return $foreign.setBreakpointImpl(row, className, self);
          };
      };
  };
  var setAnnotations = function (annotations) {
      return function (self) {
          return $foreign.setAnnotationsImpl(annotations, self);
      };
  };
  var screenToDocumentPosition = function (screenRow) {
      return function (screenColumn) {
          return function (self) {
              return $foreign.screenToDocumentPositionImpl(screenRow, screenColumn, self);
          };
      };
  };
  var screenToDocumentColumn = function (row) {
      return function (column) {
          return function (self) {
              return $foreign.screenToDocumentColumnImpl(row, column, self);
          };
      };
  };
  var resetRowCache = function (row) {
      return function (self) {
          return $foreign.resetRowCacheImpl(row, self);
      };
  };
  var replace = function (range) {
      return function (text) {
          return function (self) {
              return $foreign.replaceImpl(range, text, self);
          };
      };
  };
  var removeMarker = function (markerId) {
      return function (self) {
          return $foreign.removeMarkerImpl(markerId, self);
      };
  };
  var removeGutterDecoration = function (row) {
      return function (className) {
          return function (self) {
              return $foreign.removeGutterDecorationImpl(row, className, self);
          };
      };
  };
  var remove = function (range) {
      return function (self) {
          return $foreign.removeImpl(range, self);
      };
  };
  var outdentRows = function (range) {
      return function (self) {
          return $foreign.outdentRowsImpl(range, self);
      };
  };
  var moveLinesUp = function (firstRow) {
      return function (lastRow) {
          return function (self) {
              return $foreign.moveLinesUpImpl(firstRow, lastRow, self);
          };
      };
  };
  var moveLinesDown = function (firstRow) {
      return function (lastRow) {
          return function (self) {
              return $foreign.moveLinesDownImpl(firstRow, lastRow, self);
          };
      };
  };
  var insert = function (position) {
      return function (text) {
          return function (self) {
              return $foreign.insertImpl(position, text, self);
          };
      };
  };
  var indentRows = function (startRow) {
      return function (endRow) {
          return function (indentString) {
              return function (self) {
                  return $foreign.indentRowsImpl(startRow, endRow, indentString, self);
              };
          };
      };
  };
  var highlight = function (text) {
      return function (self) {
          return $foreign.highlightImpl(text, self);
      };
  };
  var getWordRange = function (row) {
      return function (column) {
          return function (self) {
              return $foreign.getWordRangeImpl(row, column, self);
          };
      };
  };
  var getTokens = function (row) {
      return function (self) {
          return $foreign.getTokensImpl(row, self);
      };
  };
  var getTokenAt = function (row) {
      return function (column) {
          return function (self) {
              return $foreign.getTokenAtImpl(row, column, self);
          };
      };
  };
  var getTextRange = function (range) {
      return function (self) {
          return $foreign.getTextRangeImpl(range, self);
      };
  };
  var getStringScreenWidth = function (str) {
      return function (maxScreenColumn) {
          return function (screenColumn) {
              return function (self) {
                  return $foreign.getStringScreenWidthImpl(str, maxScreenColumn, screenColumn, self);
              };
          };
      };
  };
  var getState = function (row) {
      return function (self) {
          return $foreign.getStateImpl(row, self);
      };
  };
  var getScreenTabSize = function (screenColumn) {
      return function (self) {
          return $foreign.getScreenTabSizeImpl(screenColumn, self);
      };
  };
  var getScreenLastRowColumn = function (screenRow) {
      return function (self) {
          return $foreign.getScreenLastRowColumnImpl(screenRow, self);
      };
  };
  var getRowLength = function (row) {
      return function (self) {
          return $foreign.getRowLengthImpl(row, self);
      };
  };
  var getLines = function (firstRow) {
      return function (lastRow) {
          return function (self) {
              return $foreign.getLinesImpl(firstRow, lastRow, self);
          };
      };
  };
  var getLine = function (row) {
      return function (self) {
          return $foreign.getLineImpl(row, self);
      };
  };
  var getDocumentLastRowColumnPosition = function (docRow) {
      return function (docColumn) {
          return function (self) {
              return $foreign.getDocumentLastRowColumnPositionImpl(docRow, docColumn, self);
          };
      };
  };
  var getDocumentLastRowColumn = function (docRow) {
      return function (docColumn) {
          return function (self) {
              return $foreign.getDocumentLastRowColumnImpl(docRow, docColumn, self);
          };
      };
  };
  var getDisplayTokens = function (str) {
      return function (offset) {
          return function (self) {
              return $foreign.getDisplayTokensImpl(str, offset, self);
          };
      };
  };
  var getAWordRange = function (row) {
      return function (column) {
          return function (self) {
              return $foreign.getAWordRangeImpl(row, column, self);
          };
      };
  };
  var findMatchingBracket = function (position) {
      return function (self) {
          return $foreign.findMatchingBracketImpl(position, self);
      };
  };
  var duplicateLines = function (firstRow) {
      return function (lastRow) {
          return function (self) {
              return $foreign.duplicateLinesImpl(firstRow, lastRow, self);
          };
      };
  };
  var documentToScreenRow = function (docRow) {
      return function (docColumn) {
          return function (self) {
              return $foreign.documentToScreenRowImpl(docRow, docColumn, self);
          };
      };
  };
  var documentToScreenPosition = function (docRow) {
      return function (docColumn) {
          return function (self) {
              return $foreign.documentToScreenPositionImpl(docRow, docColumn, self);
          };
      };
  };
  var documentToScreenColumn = function (row) {
      return function (docColumn) {
          return function (self) {
              return $foreign.documentToScreenColumnImpl(row, docColumn, self);
          };
      };
  };
  var detectNewLine = function (text) {
      return function (self) {
          return $foreign.detectNewLineImpl(text, self);
      };
  };
  var clearBreakpoint = function (row) {
      return function (self) {
          return $foreign.clearBreakpointImpl(row, self);
      };
  };
  var adjustWrapLimit = function (desiredLimit) {
      return function (self) {
          return $foreign.adjustWrapLimitImpl(desiredLimit, self);
      };
  };
  var addMarker = function (range) {
      return function (clazz) {
          return function (_type) {
              return function (inFront) {
                  return function (self) {
                      return $foreign.addMarkerImpl(range, clazz, _type, inFront, self);
                  };
              };
          };
      };
  };
  var addGutterDecoration = function (row) {
      return function (className) {
          return function (self) {
              return $foreign.addGutterDecorationImpl(row, className, self);
          };
      };
  };
  var addFold = function (text) {
      return function (range) {
          return function (self) {
              return $foreign.addFoldImpl(text, range, self);
          };
      };
  };
  var addDynamicMarker = function (marker) {
      return function (inFront) {
          return function (self) {
              return $foreign.addDynamicMarkerImpl(marker, inFront, self);
          };
      };
  };
  exports["addDynamicMarker"] = addDynamicMarker;
  exports["addFold"] = addFold;
  exports["addGutterDecoration"] = addGutterDecoration;
  exports["addMarker"] = addMarker;
  exports["adjustWrapLimit"] = adjustWrapLimit;
  exports["clearBreakpoint"] = clearBreakpoint;
  exports["detectNewLine"] = detectNewLine;
  exports["documentToScreenColumn"] = documentToScreenColumn;
  exports["documentToScreenPosition"] = documentToScreenPosition;
  exports["documentToScreenRow"] = documentToScreenRow;
  exports["duplicateLines"] = duplicateLines;
  exports["findMatchingBracket"] = findMatchingBracket;
  exports["getAWordRange"] = getAWordRange;
  exports["getDisplayTokens"] = getDisplayTokens;
  exports["getDocumentLastRowColumn"] = getDocumentLastRowColumn;
  exports["getDocumentLastRowColumnPosition"] = getDocumentLastRowColumnPosition;
  exports["getLine"] = getLine;
  exports["getLines"] = getLines;
  exports["getRowLength"] = getRowLength;
  exports["getScreenLastRowColumn"] = getScreenLastRowColumn;
  exports["getScreenTabSize"] = getScreenTabSize;
  exports["getState"] = getState;
  exports["getStringScreenWidth"] = getStringScreenWidth;
  exports["getTextRange"] = getTextRange;
  exports["getTokenAt"] = getTokenAt;
  exports["getTokens"] = getTokens;
  exports["getWordRange"] = getWordRange;
  exports["highlight"] = highlight;
  exports["indentRows"] = indentRows;
  exports["insert"] = insert;
  exports["moveLinesDown"] = moveLinesDown;
  exports["moveLinesUp"] = moveLinesUp;
  exports["outdentRows"] = outdentRows;
  exports["remove"] = remove;
  exports["removeGutterDecoration"] = removeGutterDecoration;
  exports["removeMarker"] = removeMarker;
  exports["replace"] = replace;
  exports["resetRowCache"] = resetRowCache;
  exports["screenToDocumentColumn"] = screenToDocumentColumn;
  exports["screenToDocumentPosition"] = screenToDocumentPosition;
  exports["setAnnotations"] = setAnnotations;
  exports["setBreakpoint"] = setBreakpoint;
  exports["setBreakpoints"] = setBreakpoints;
  exports["setDocument"] = setDocument;
  exports["setMode"] = setMode;
  exports["setNewLineMode"] = setNewLineMode;
  exports["setOverwrite"] = setOverwrite;
  exports["setScrollLeft"] = setScrollLeft;
  exports["setScrollTop"] = setScrollTop;
  exports["setTabSize"] = setTabSize;
  exports["setUndoManager"] = setUndoManager;
  exports["setUndoSelect"] = setUndoSelect;
  exports["setUseSoftTabs"] = setUseSoftTabs;
  exports["setUseWorker"] = setUseWorker;
  exports["setUseWrapMode"] = setUseWrapMode;
  exports["setValue"] = setValue;
  exports["setWrapLimitRange"] = setWrapLimitRange;
  exports["clearAnnotations"] = $foreign.clearAnnotations;
  exports["clearBreakpoints"] = $foreign.clearBreakpoints;
  exports["getAnnotations"] = $foreign.getAnnotations;
  exports["getBackgroundTokenizer"] = $foreign.getBackgroundTokenizer;
  exports["getBreakpoints"] = $foreign.getBreakpoints;
  exports["getDocument"] = $foreign.getDocument;
  exports["getLength"] = $foreign.getLength;
  exports["getMode"] = $foreign.getMode;
  exports["getNewLineMode"] = $foreign.getNewLineMode;
  exports["getOverwrite"] = $foreign.getOverwrite;
  exports["getRowSplitData"] = $foreign.getRowSplitData;
  exports["getScreenLength"] = $foreign.getScreenLength;
  exports["getScreenWidth"] = $foreign.getScreenWidth;
  exports["getScrollLeft"] = $foreign.getScrollLeft;
  exports["getScrollTop"] = $foreign.getScrollTop;
  exports["getSelection"] = $foreign.getSelection;
  exports["getTabSize"] = $foreign.getTabSize;
  exports["getTabString"] = $foreign.getTabString;
  exports["getUndoManager"] = $foreign.getUndoManager;
  exports["getUseSoftTabs"] = $foreign.getUseSoftTabs;
  exports["getUseWorker"] = $foreign.getUseWorker;
  exports["getUseWrapMode"] = $foreign.getUseWrapMode;
  exports["getValue"] = $foreign.getValue;
  exports["getWrapLimit"] = $foreign.getWrapLimit;
  exports["getWrapLimitRange"] = $foreign.getWrapLimitRange;
  exports["toggleOverwrite"] = $foreign.toggleOverwrite;
})(PS);
(function(exports) {
  "use strict";

  function effize(method) {
    return function () {
      var me = arguments[arguments.length - 1];
      var args = Array.prototype.slice.call(arguments, 0, -1);
      return function () {
        return me[method].apply(me, args);
      };
    };
  }

  function effGet(field) {
    return function (self) {
      return function () {
        return self[field];
      };
    };
  }

  function effSet(field) {
    return function (val, self) {
      return function () {
        self[field] = val;
      };
    };
  }

  exports.onImpl = function (event, fn, self) {
    return function () {
      return self.on(event, function (e) {
        fn(e)();
      });
    };
  };                                             
  exports.getRenderer = effGet("renderer");                 
  exports.selectMoreLinesImpl = effize("selectMoreLines");
  exports.getContainer = effGet("container");
  exports.setKeyboardHandlerImpl = effize("setKeyboardHandler");
  exports.getKeyboardHandler = effize("getKeyboardHandler");
  exports.setSessionImpl = effize("setSession");
  exports.getSession = effize("getSession");
  exports.setValueImpl = effize("setValue");
  exports.getValue = effize("getValue");
  exports.getSelection = effize("getSelection");
  exports.resizeImpl = effize("resize");
  exports.setThemeImpl = effize("setTheme");
  exports.getTheme = effize("getTheme");
  exports.setStyleImpl = effize("setStyle");
  exports.unsetStyle = effize("unsetStyle");
  exports.setFontSizeImpl = effize("setFontSize");
  exports.focus = effize("focus");
  exports.isFocused = effize("isFocused");
  exports.blur = effize("blur");
  exports.getCopyText = effize("getCopyText");
  exports.insertImpl = effize("insert");
  exports.setOverwriteImpl = effize("setOverwrite");
  exports.getOverwrite = effize("getOverwrite");
  exports.toggleOverwrite = effize("toggleOverwrite");
  exports.setScrollSpeedImpl = effize("setScrollSpeed");
  exports.getScrollSpeed = effize("getScrollSpeed");
  exports.setDragDelayImpl = effize("setDragDelay");
  exports.getDragDelay = effize("getDragDelay");
  exports.setSelectionStyleImpl = effize("setSelectionStyle");
  exports.getSelectionStyle = effize("getSelectionStyle");
  exports.setHighlightActiveLineImpl = effize("setHighlightActiveLine");
  exports.getHighlightActiveLine = effize("getHighlightActiveLine");
  exports.setHighlightSelectedWordImpl = effize("setHighlightSelectedWord");
  exports.getHighlightSelectedWord = effize("getHighlightSelectedWord");
  exports.setShowInvisiblesImpl = effize("setShowInvisibles");
  exports.getShowInvisibles = effize("getShowInvisibles");
  exports.setShowPrintMarginImpl = effize("setShowPrintMargin");
  exports.getShowPrintMargin = effize("getShowPrintMargin");
  exports.setPrintMarginColumnImpl = effize("setPrintMarginColumn");
  exports.getPrintMarginColumn = effize("getPrintMarginColumn");
  exports.setReadOnlyImpl = effize("setReadOnly");
  exports.getReadOnly = effize("getReadOnly");
  exports.setBehavioursEnabledImpl = effize("setBehavioursEnabled");
  exports.getBehavioursEnabled = effize("getBehavioursEnabled");
  exports.setWrapBehavioursEnabledImpl = effize("setWrapBehavioursEnabled");
  exports.getWrapBehavioursEnabled = effize("getWrapBehavioursEnabled");
  exports.setShowFoldWidgetsImpl = effize("setShowFoldWidgets");
  exports.getShowFoldWidgets = effize("getShowFoldWidgets");
  exports.removeImpl = effize("remove");
  exports.removeWordRight = effize("removeWordRight");
  exports.removeWordLeft = effize("removeWordLeft");
  exports.removeToLineStart = effize("removeToLineStart");
  exports.removeToLineEnd = effize("removeToLineEnd");
  exports.splitLine = effize("splitLine");
  exports.transposeLetters = effize("transposeLetters");
  exports.toLowerCase = effize("toLowerCase");
  exports.toUpperCase = effize("toUpperCase");
  exports.indent = effize("indent");
  exports.blockIndent = effize("blockIndent");
  exports.blockOutdentImpl = effize("blockOutdent");
  exports.toggleCommentLines = effize("toggleCommentLines");
  exports.getNumberAt = effize("getNumberAt");
  exports.modifyNumberImpl = effize("modifyNumber");
  exports.removeLines = effize("removeLines");
  exports.moveLinesDown = effize("moveLinesDown");
  exports.moveLinesUp = effize("moveLinesUp");
  exports.copyLinesUp = effize("copyLinesUp");
  exports.copyLinesDown = effize("copyLinesDown");
  exports.getFirstVisibleRow = effize("getFirstVisibleRow");
  exports.getLastVisibleRow = effize("getLastVisibleRow");
  exports.isRowVisibleImpl = effize("isRowVisible");
  exports.isRowFullyVisibleImpl = effize("isRowFullyVisible");
  exports.selectPageDown = effize("selectPageDown");
  exports.selectPageUp = effize("selectPageUp");
  exports.gotoPageDown = effize("gotoPageDown");
  exports.gotoPageUp = effize("gotoPageUp");
  exports.scrollPageDown = effize("scrollPageDown");
  exports.scrollPageUp = effize("scrollPageUp");
  exports.scrollToRow = effize("scrollToRow");      
  exports.centerSelection = effize("centerSelection");
  exports.getCursorPosition = effize("getCursorPosition");
  exports.getCursorPositionScreen = effize("getCursorPositionScreen");
  exports.getSelectionRange = effize("getSelectionRange");
  exports.selectAll = effize("selectAll");
  exports.clearSelection = effize("clearSelection");
  exports.moveCursorToImpl = effize("moveCursorTo");
  exports.moveCursorToPositionImpl = effize("moveCursorToPosition");
  exports.jumpToMatching = effize("jumpToMatching");
  exports.gotoLineImpl = effize("gotoLine");
  exports.navigateToImpl = effize("navigateTo");
  exports.navigateUpImpl = effize("navigateUp");
  exports.navigateDownImpl = effize("navigateDown");
  exports.navigateLeftImpl = effize("navigateLeft");
  exports.navigateRightImpl = effize("navigateRight");
  exports.navigateLineStart = effize("navigateLineStart");
  exports.navigateLineEnd = effize("navigateLineEnd");
  exports.navigateFileEnd = effize("navigateFileEnd");
  exports.navigateFileStart = effize("navigateFileStart");
  exports.navigateWordRight = effize("navigateWordRight");
  exports.navigateWordLeft = effize("navigateWordLeft");
  exports.replaceImpl = effize("replace");
  exports.replaceAllImpl = effize("replaceAll");
  exports.getLastSearchOptions = effize("getLastSearchOptions");
  exports.findImpl = effize("find");
  exports.findNextImpl = effize("findNext");
  exports.findPreviousImpl = effize("findPrevious");
  exports.undo = effize("undo");
  exports.redo = effize("redo");
  exports.destroy = effize("destroy");

  exports.setOption = function (s) {
    return function (a) {
      return function (editor) {
        return function () {
          editor.setOption(s, a);
        };
      };
    };
  };

  exports.getKeyBinding = function (editor) {
    return function () {
      return editor.keyBinding;
    };
  };
})(PS["Ace.Editor"] = PS["Ace.Editor"] || {});
(function(exports) {
  /* eslint-disable no-eq-null, eqeqeq */

  "use strict";

  exports["null"] = null;

  exports.notNull = function (x) {
    return x;
  };
})(PS["Data.Nullable"] = PS["Data.Nullable"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Nullable"] = $PS["Data.Nullable"] || {};
  var exports = $PS["Data.Nullable"];
  var $foreign = $PS["Data.Nullable"];
  var Data_Maybe = $PS["Data.Maybe"];              
  var toNullable = Data_Maybe.maybe($foreign["null"])($foreign.notNull);
  exports["toNullable"] = toNullable;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Ace.Editor"] = $PS["Ace.Editor"] || {};
  var exports = $PS["Ace.Editor"];
  var $foreign = $PS["Ace.Editor"];
  var Data_Nullable = $PS["Data.Nullable"];                
  var setWrapBehavioursEnabled = function (enabled) {
      return function (self) {
          return $foreign.setWrapBehavioursEnabledImpl(enabled, self);
      };
  };
  var setValue = function (val) {
      return function (cursorPos) {
          return function (self) {
              return $foreign.setValueImpl(val, Data_Nullable.toNullable(cursorPos), self);
          };
      };
  };
  var setTheme = function (theme) {
      return function (self) {
          return $foreign.setThemeImpl(theme, self);
      };
  };
  var setStyle = function (style) {
      return function (self) {
          return $foreign.setStyleImpl(style, self);
      };
  };
  var setShowPrintMargin = function (showPrintMargin) {
      return function (self) {
          return $foreign.setShowPrintMarginImpl(showPrintMargin, self);
      };
  };
  var setShowInvisibles = function (showInvisibles) {
      return function (self) {
          return $foreign.setShowInvisiblesImpl(showInvisibles, self);
      };
  };
  var setShowFoldWidgets = function (show) {
      return function (self) {
          return $foreign.setShowFoldWidgetsImpl(show, self);
      };
  };
  var setSession = function (session) {
      return function (self) {
          return $foreign.setSessionImpl(session, self);
      };
  };
  var setSelectionStyle = function (style) {
      return function (self) {
          return $foreign.setSelectionStyleImpl(style, self);
      };
  };
  var setScrollSpeed = function (speed) {
      return function (self) {
          return $foreign.setScrollSpeedImpl(speed, self);
      };
  };
  var setReadOnly = function (readOnly) {
      return function (self) {
          return $foreign.setReadOnlyImpl(readOnly, self);
      };
  };
  var setPrintMarginColumn = function (showPrintMargin) {
      return function (self) {
          return $foreign.setPrintMarginColumnImpl(showPrintMargin, self);
      };
  };
  var setOverwrite = function (overwrite) {
      return function (self) {
          return $foreign.setOverwriteImpl(overwrite, self);
      };
  };                                               
  var setKeyboardHandler = function (keyboardHandler) {
      return function (self) {
          return $foreign.setKeyboardHandlerImpl(keyboardHandler, self);
      };
  };
  var setHighlightSelectedWord = function (shouldHighlight) {
      return function (self) {
          return $foreign.setHighlightSelectedWordImpl(shouldHighlight, self);
      };
  };
  var setHighlightActiveLine = function (shouldHighlight) {
      return function (self) {
          return $foreign.setHighlightActiveLineImpl(shouldHighlight, self);
      };
  };
  var setFontSize = function (size) {
      return function (self) {
          return $foreign.setFontSizeImpl(size, self);
      };
  };                                                                               
  var setEnableBasicAutocompletion = $foreign.setOption("enableBasicAutocompletion");
  var setDragDelay = function (dragDelay) {
      return function (self) {
          return $foreign.setDragDelayImpl(dragDelay, self);
      };
  };
  var setBehavioursEnabled = function (enabled) {
      return function (self) {
          return $foreign.setBehavioursEnabledImpl(enabled, self);
      };
  };                                                                               
  var selectMoreLines = function (n) {
      return function (self) {
          return $foreign.selectMoreLinesImpl(n, self);
      };
  };
  var resize = function (force) {
      return function (self) {
          return $foreign.resizeImpl(Data_Nullable.toNullable(force), self);
      };
  };
  var replaceAll = function (replacement) {
      return function (options) {
          return function (self) {
              return $foreign.replaceAllImpl(replacement, Data_Nullable.toNullable(options), self);
          };
      };
  };
  var replace = function (replacement) {
      return function (options) {
          return function (self) {
              return $foreign.replaceImpl(replacement, Data_Nullable.toNullable(options), self);
          };
      };
  };
  var remove = function (dir) {
      return function (self) {
          return $foreign.removeImpl(dir, self);
      };
  };
  var onPaste = function (self) {
      return function (fn) {
          return $foreign.onImpl("paste", fn, self);
      };
  };
  var onFocus = function (self) {
      return function (fn) {
          return $foreign.onImpl("focus", function (v) {
              return fn;
          }, self);
      };
  };
  var onCopy = function (self) {
      return function (fn) {
          return $foreign.onImpl("copy", fn, self);
      };
  };
  var onBlur = function (self) {
      return function (fn) {
          return $foreign.onImpl("blur", function (v) {
              return fn;
          }, self);
      };
  };
  var navigateUp = function (times) {
      return function (self) {
          return $foreign.navigateUpImpl(Data_Nullable.toNullable(times), self);
      };
  };
  var navigateTo = function (row) {
      return function (column) {
          return function (self) {
              return $foreign.navigateToImpl(row, column, self);
          };
      };
  };
  var navigateRight = function (times) {
      return function (self) {
          return $foreign.navigateRightImpl(times, self);
      };
  };
  var navigateLeft = function (times) {
      return function (self) {
          return $foreign.navigateLeftImpl(Data_Nullable.toNullable(times), self);
      };
  };
  var navigateDown = function (times) {
      return function (self) {
          return $foreign.navigateDownImpl(Data_Nullable.toNullable(times), self);
      };
  };
  var moveCursorToPosition = function (position) {
      return function (self) {
          return $foreign.moveCursorToPositionImpl(position, self);
      };
  };
  var moveCursorTo = function (row) {
      return function (column) {
          return function (animate) {
              return function (self) {
                  return $foreign.moveCursorToImpl(row, Data_Nullable.toNullable(column), Data_Nullable.toNullable(animate), self);
              };
          };
      };
  };
  var modifyNumber = function (amount) {
      return function (self) {
          return $foreign.modifyNumberImpl(amount, self);
      };
  };
  var isRowVisible = function (row) {
      return function (self) {
          return $foreign.isRowVisibleImpl(row, self);
      };
  };
  var isRowFullyVisible = function (row) {
      return function (self) {
          return $foreign.isRowFullyVisibleImpl(row, self);
      };
  };
  var insert = function (text) {
      return function (self) {
          return $foreign.insertImpl(text, self);
      };
  };
  var gotoLine = function (lineNumber) {
      return function (column) {
          return function (animate) {
              return function (self) {
                  return $foreign.gotoLineImpl(lineNumber, Data_Nullable.toNullable(column), Data_Nullable.toNullable(animate), self);
              };
          };
      };
  };
  var findPrevious = function (options) {
      return function (animate) {
          return function (self) {
              return $foreign.findPreviousImpl(Data_Nullable.toNullable(options), Data_Nullable.toNullable(animate), self);
          };
      };
  };
  var findNext = function (options) {
      return function (animate) {
          return function (self) {
              return $foreign.findNextImpl(Data_Nullable.toNullable(options), Data_Nullable.toNullable(animate), self);
          };
      };
  };
  var find = function (needle) {
      return function (options) {
          return function (animate) {
              return function (self) {
                  return $foreign.findImpl(needle, Data_Nullable.toNullable(options), Data_Nullable.toNullable(animate), self);
              };
          };
      };
  };
  var blockOutdent = function (arg) {
      return function (self) {
          return $foreign.blockOutdentImpl(Data_Nullable.toNullable(arg), self);
      };
  };
  exports["blockOutdent"] = blockOutdent;
  exports["find"] = find;
  exports["findNext"] = findNext;
  exports["findPrevious"] = findPrevious;
  exports["gotoLine"] = gotoLine;
  exports["insert"] = insert;
  exports["isRowFullyVisible"] = isRowFullyVisible;
  exports["isRowVisible"] = isRowVisible;
  exports["modifyNumber"] = modifyNumber;
  exports["moveCursorTo"] = moveCursorTo;
  exports["moveCursorToPosition"] = moveCursorToPosition;
  exports["navigateDown"] = navigateDown;
  exports["navigateLeft"] = navigateLeft;
  exports["navigateRight"] = navigateRight;
  exports["navigateTo"] = navigateTo;
  exports["navigateUp"] = navigateUp;
  exports["onBlur"] = onBlur;
  exports["onFocus"] = onFocus;
  exports["onCopy"] = onCopy;
  exports["onPaste"] = onPaste;
  exports["remove"] = remove;
  exports["replaceAll"] = replaceAll;
  exports["replace"] = replace;
  exports["resize"] = resize;
  exports["selectMoreLines"] = selectMoreLines;
  exports["setBehavioursEnabled"] = setBehavioursEnabled;
  exports["setDragDelay"] = setDragDelay;
  exports["setFontSize"] = setFontSize;
  exports["setHighlightActiveLine"] = setHighlightActiveLine;
  exports["setHighlightSelectedWord"] = setHighlightSelectedWord;
  exports["setKeyboardHandler"] = setKeyboardHandler;
  exports["setOverwrite"] = setOverwrite;
  exports["setPrintMarginColumn"] = setPrintMarginColumn;
  exports["setReadOnly"] = setReadOnly;
  exports["setScrollSpeed"] = setScrollSpeed;
  exports["setSelectionStyle"] = setSelectionStyle;
  exports["setSession"] = setSession;
  exports["setShowFoldWidgets"] = setShowFoldWidgets;
  exports["setShowInvisibles"] = setShowInvisibles;
  exports["setShowPrintMargin"] = setShowPrintMargin;
  exports["setStyle"] = setStyle;
  exports["setTheme"] = setTheme;
  exports["setValue"] = setValue;
  exports["setWrapBehavioursEnabled"] = setWrapBehavioursEnabled;
  exports["setEnableBasicAutocompletion"] = setEnableBasicAutocompletion;
  exports["blockIndent"] = $foreign.blockIndent;
  exports["blur"] = $foreign.blur;
  exports["centerSelection"] = $foreign.centerSelection;
  exports["clearSelection"] = $foreign.clearSelection;
  exports["copyLinesDown"] = $foreign.copyLinesDown;
  exports["copyLinesUp"] = $foreign.copyLinesUp;
  exports["destroy"] = $foreign.destroy;
  exports["focus"] = $foreign.focus;
  exports["getBehavioursEnabled"] = $foreign.getBehavioursEnabled;
  exports["getContainer"] = $foreign.getContainer;
  exports["getCopyText"] = $foreign.getCopyText;
  exports["getCursorPosition"] = $foreign.getCursorPosition;
  exports["getCursorPositionScreen"] = $foreign.getCursorPositionScreen;
  exports["getDragDelay"] = $foreign.getDragDelay;
  exports["getFirstVisibleRow"] = $foreign.getFirstVisibleRow;
  exports["getHighlightActiveLine"] = $foreign.getHighlightActiveLine;
  exports["getHighlightSelectedWord"] = $foreign.getHighlightSelectedWord;
  exports["getKeyboardHandler"] = $foreign.getKeyboardHandler;
  exports["getLastSearchOptions"] = $foreign.getLastSearchOptions;
  exports["getLastVisibleRow"] = $foreign.getLastVisibleRow;
  exports["getNumberAt"] = $foreign.getNumberAt;
  exports["getOverwrite"] = $foreign.getOverwrite;
  exports["getPrintMarginColumn"] = $foreign.getPrintMarginColumn;
  exports["getReadOnly"] = $foreign.getReadOnly;
  exports["getRenderer"] = $foreign.getRenderer;
  exports["getScrollSpeed"] = $foreign.getScrollSpeed;
  exports["getSelection"] = $foreign.getSelection;
  exports["getSelectionRange"] = $foreign.getSelectionRange;
  exports["getSelectionStyle"] = $foreign.getSelectionStyle;
  exports["getSession"] = $foreign.getSession;
  exports["getShowFoldWidgets"] = $foreign.getShowFoldWidgets;
  exports["getShowInvisibles"] = $foreign.getShowInvisibles;
  exports["getShowPrintMargin"] = $foreign.getShowPrintMargin;
  exports["getTheme"] = $foreign.getTheme;
  exports["getValue"] = $foreign.getValue;
  exports["getWrapBehavioursEnabled"] = $foreign.getWrapBehavioursEnabled;
  exports["gotoPageDown"] = $foreign.gotoPageDown;
  exports["gotoPageUp"] = $foreign.gotoPageUp;
  exports["indent"] = $foreign.indent;
  exports["isFocused"] = $foreign.isFocused;
  exports["jumpToMatching"] = $foreign.jumpToMatching;
  exports["moveLinesDown"] = $foreign.moveLinesDown;
  exports["moveLinesUp"] = $foreign.moveLinesUp;
  exports["navigateFileEnd"] = $foreign.navigateFileEnd;
  exports["navigateFileStart"] = $foreign.navigateFileStart;
  exports["navigateLineEnd"] = $foreign.navigateLineEnd;
  exports["navigateLineStart"] = $foreign.navigateLineStart;
  exports["navigateWordLeft"] = $foreign.navigateWordLeft;
  exports["navigateWordRight"] = $foreign.navigateWordRight;
  exports["redo"] = $foreign.redo;
  exports["removeLines"] = $foreign.removeLines;
  exports["removeToLineEnd"] = $foreign.removeToLineEnd;
  exports["removeToLineStart"] = $foreign.removeToLineStart;
  exports["removeWordLeft"] = $foreign.removeWordLeft;
  exports["removeWordRight"] = $foreign.removeWordRight;
  exports["scrollPageDown"] = $foreign.scrollPageDown;
  exports["scrollPageUp"] = $foreign.scrollPageUp;
  exports["scrollToRow"] = $foreign.scrollToRow;
  exports["selectAll"] = $foreign.selectAll;
  exports["selectPageDown"] = $foreign.selectPageDown;
  exports["selectPageUp"] = $foreign.selectPageUp;
  exports["splitLine"] = $foreign.splitLine;
  exports["toLowerCase"] = $foreign.toLowerCase;
  exports["toUpperCase"] = $foreign.toUpperCase;
  exports["toggleCommentLines"] = $foreign.toggleCommentLines;
  exports["toggleOverwrite"] = $foreign.toggleOverwrite;
  exports["transposeLetters"] = $foreign.transposeLetters;
  exports["undo"] = $foreign.undo;
  exports["unsetStyle"] = $foreign.unsetStyle;
  exports["getKeyBinding"] = $foreign.getKeyBinding;
})(PS);
(function(exports) {
  "use strict";

  exports.languageTools = function () {
    return ace.require("ace/ext/language_tools");
  };

  exports.addCompleter = function (completer) {
    return function (lt) {
      return function () {
        return lt.addCompleter(completer);
      };
    };
  };
})(PS["Ace.Ext.LanguageTools"] = PS["Ace.Ext.LanguageTools"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Ace.Ext.LanguageTools"] = $PS["Ace.Ext.LanguageTools"] || {};
  var exports = $PS["Ace.Ext.LanguageTools"];
  var $foreign = $PS["Ace.Ext.LanguageTools"];
  exports["languageTools"] = $foreign.languageTools;
  exports["addCompleter"] = $foreign.addCompleter;
})(PS);
(function(exports) {
  "use strict";

  exports.mkCompleterImpl = function (getCompletionCb, isJust, fromJust) {
    return function () {
      return {
        getCompletions: function (editor, session, pos, prefix, callback) {
          return getCompletionCb(editor)(session)(pos)(prefix)(function (mb) {
            return function () {
              if (!isJust(mb)) {
                return callback("Error in getCompletion", null);
              }
              var result = [];
              var extracted = fromJust(mb);
              for (var i = 0; i < extracted.length; i++) {
                var current = extracted[i];
                result[i] = {
                  value: current.value,
                  score: current.score,
                  meta: current.meta,
                  caption: isJust(current.caption) ? fromJust(current.caption) : undefined
                };
              }
              return callback(null, result);
            };
          })();
        }
      };
    };
  };
})(PS["Ace.Ext.LanguageTools.Completer"] = PS["Ace.Ext.LanguageTools.Completer"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Ace.Ext.LanguageTools.Completer"] = $PS["Ace.Ext.LanguageTools.Completer"] || {};
  var exports = $PS["Ace.Ext.LanguageTools.Completer"];
  var $foreign = $PS["Ace.Ext.LanguageTools.Completer"];
  var Data_Maybe = $PS["Data.Maybe"];                
  var mkCompleter = function (fn) {
      return $foreign.mkCompleterImpl(fn, Data_Maybe.isJust, Data_Maybe.fromJust());
  };
  exports["mkCompleter"] = mkCompleter;
})(PS);
(function(exports) {
  "use strict";

  exports.addKeyboardHandlerImpl = function (commandToString) {
    return function (isJust) {
      return function (fromJust) {
        return function (curriedEffHandler) {
          return function (kb) {
            return function () {
              kb.addKeyboardHandler(
                function (data, hash, keyCode, keyString, evt) {
                  var res = curriedEffHandler(data)(hash)(keyCode)(keyString)(evt)();
                  if (isJust(res)) {
                    var extracted = fromJust(res);
                    return {
                      passEvent: extracted.passEvent,
                      command: commandToString(extracted.command)
                    };
                  } else {
                    return false;
                  }
                });
              return {};
            };
          };
        };
      };
    };
  };
})(PS["Ace.KeyBinding"] = PS["Ace.KeyBinding"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Ace.KeyBinding"] = $PS["Ace.KeyBinding"] || {};
  var exports = $PS["Ace.KeyBinding"];
  var $foreign = $PS["Ace.KeyBinding"];
  var Ace_Command = $PS["Ace.Command"];
  var Data_Maybe = $PS["Data.Maybe"];                
  var addKeyboardHandler = $foreign.addKeyboardHandlerImpl(Ace_Command.commandToString)(Data_Maybe.isJust)(Data_Maybe.fromJust());
  exports["addKeyboardHandler"] = addKeyboardHandler;
})(PS);
(function(exports) {
  "use strict";

  function effize(method) {
    return function () {
      var me = arguments[arguments.length - 1];
      var args = Array.prototype.slice.call(arguments, 0, -1);
      return function () {
        return me[method].apply(me, args);
      };
    };
  }

  function effGet(field) {
    return function (self) {
      return function () {
        return self[field];
      };
    };
  }                              
  exports.isEmpty = effize("isEmpty");
  exports.isEqualImpl = effize("isEqual");
  exports.toString = effize("toString");
  exports.containsImpl = effize("contains");
  exports.compareRangeImpl = effize("compareRange");
  exports.comparePointImpl = effize("comparePoint");
  exports.containsRangeImpl = effize("containsRange");
  exports.intersectsImpl = effize("intersects");
  exports.isEndImpl = effize("isEnd");
  exports.isStartImpl = effize("isStart");
  exports.setStartImpl = effize("setStart");
  exports.setEndImpl = effize("setEnd");
  exports.insideImpl = effize("inside");
  exports.insideStartImpl = effize("insideStart");
  exports.insideEndImpl = effize("insideEnd");
  exports.compareImpl = effize("compare");
  exports.compareStartImpl = effize("compareStart");
  exports.compareEndImpl = effize("compareEnd");
  exports.compareInsideImpl = effize("compareInside");
  exports.clipRowsImpl = effize("clipRows");
  exports.extendImpl = effize("extend");
  exports.isMultiLine = effize("isMultiLine");
  exports.clone = effize("clone");
  exports.collapseRows = effize("collapseRows");
  exports.toScreenRangeImpl = effize("toScreenRange");

  exports.fromPointsImpl = function (start, end) {
    return function () {
      var Range = ace.require("ace/range").Range;
      return Range.fromPoints(start, end);
    };
  };

  exports.createImpl = function (startRow, startColumn, endRow, endColumn) {
    return function () {
      var Range = ace.require("ace/range").Range;
      return new Range(startRow, startColumn, endRow, endColumn);
    };
  };
})(PS["Ace.Range"] = PS["Ace.Range"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Ace.Range"] = $PS["Ace.Range"] || {};
  var exports = $PS["Ace.Range"];
  var $foreign = $PS["Ace.Range"];       
  var toScreenRange = function (session) {
      return function (self) {
          return $foreign.toScreenRangeImpl(session, self);
      };
  };
  var setStart = function (row) {
      return function (column) {
          return function (self) {
              return $foreign.setStartImpl(row, column, self);
          };
      };
  };
  var setEnd = function (row) {
      return function (column) {
          return function (self) {
              return $foreign.setEndImpl(row, column, self);
          };
      };
  };
  var isStart = function (row) {
      return function (column) {
          return function (self) {
              return $foreign.isStartImpl(row, column, self);
          };
      };
  };
  var isEqual = function (range) {
      return function (self) {
          return $foreign.isEqualImpl(range, self);
      };
  };
  var isEnd = function (row) {
      return function (column) {
          return function (self) {
              return $foreign.isEndImpl(row, column, self);
          };
      };
  };
  var intersects = function (range) {
      return function (self) {
          return $foreign.intersectsImpl(range, self);
      };
  };
  var insideStart = function (row) {
      return function (column) {
          return function (self) {
              return $foreign.insideStartImpl(row, column, self);
          };
      };
  };
  var insideEnd = function (row) {
      return function (column) {
          return function (self) {
              return $foreign.insideEndImpl(row, column, self);
          };
      };
  };
  var inside = function (row) {
      return function (column) {
          return function (self) {
              return $foreign.insideImpl(row, column, self);
          };
      };
  };
  var fromPoints = function (start) {
      return function (end) {
          return $foreign.fromPointsImpl(start, end);
      };
  };
  var extend = function (row) {
      return function (column) {
          return function (self) {
              return $foreign.extendImpl(row, column, self);
          };
      };
  };
  var create = function (startRow) {
      return function (startColumn) {
          return function (endRow) {
              return function (endColumn) {
                  return $foreign.createImpl(startRow, startColumn, endRow, endColumn);
              };
          };
      };
  };
  var containsRange = function (range) {
      return function (self) {
          return $foreign.containsRangeImpl(range, self);
      };
  };
  var contains = function (row) {
      return function (column) {
          return function (self) {
              return $foreign.containsImpl(row, column, self);
          };
      };
  };
  var compareStart = function (row) {
      return function (column) {
          return function (self) {
              return $foreign.compareStartImpl(row, column, self);
          };
      };
  };
  var compareRange = function (range) {
      return function (self) {
          return $foreign.compareRangeImpl(range, self);
      };
  };
  var comparePoint = function (p) {
      return function (self) {
          return $foreign.comparePointImpl(p, self);
      };
  };
  var compareInside = function (row) {
      return function (column) {
          return function (self) {
              return $foreign.compareInsideImpl(row, column, self);
          };
      };
  };
  var compareEnd = function (row) {
      return function (column) {
          return function (self) {
              return $foreign.compareEndImpl(row, column, self);
          };
      };
  };
  var compare = function (row) {
      return function (column) {
          return function (self) {
              return $foreign.compareImpl(row, column, self);
          };
      };
  };
  var clipRows = function (firstRow) {
      return function (lastRow) {
          return function (self) {
              return $foreign.clipRowsImpl(firstRow, lastRow, self);
          };
      };
  };
  exports["clipRows"] = clipRows;
  exports["compare"] = compare;
  exports["compareEnd"] = compareEnd;
  exports["compareInside"] = compareInside;
  exports["comparePoint"] = comparePoint;
  exports["compareRange"] = compareRange;
  exports["compareStart"] = compareStart;
  exports["contains"] = contains;
  exports["containsRange"] = containsRange;
  exports["create"] = create;
  exports["extend"] = extend;
  exports["fromPoints"] = fromPoints;
  exports["inside"] = inside;
  exports["insideEnd"] = insideEnd;
  exports["insideStart"] = insideStart;
  exports["intersects"] = intersects;
  exports["isEnd"] = isEnd;
  exports["isEqual"] = isEqual;
  exports["isStart"] = isStart;
  exports["setEnd"] = setEnd;
  exports["setStart"] = setStart;
  exports["toScreenRange"] = toScreenRange;
  exports["clone"] = $foreign.clone;
  exports["collapseRows"] = $foreign.collapseRows;
  exports["isEmpty"] = $foreign.isEmpty;
  exports["isMultiLine"] = $foreign.isMultiLine;
  exports["toString"] = $foreign.toString;
})(PS);
(function(exports) {
  "use strict";

  function effize(method) {
    return function () {
      var me = arguments[arguments.length - 1];
      var args = Array.prototype.slice.call(arguments, 0, -1);
      return function () {
        return me[method].apply(me, args);
      };
    };
  }

  exports.onScrollImpl = function (self, fn) {
    return function () {
      return self.on("scroll", function () {
        fn();
      });
    };
  };

  exports.getWidth = effize("getWidth");
  exports.setHeightImpl = effize("setHeight");
  exports.setInnerHeightImpl = effize("setInnerHeight");
  exports.setScrollTopImpl = effize("setScrollTop");

  exports.createImpl = function (parent, vr) {
    return function () {
      var ScrollBar = ace.require("ace/scrollbar").ScrollBar;
      return new ScrollBar(parent, vr);
    };
  };
})(PS["Ace.ScrollBar"] = PS["Ace.ScrollBar"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Ace.ScrollBar"] = $PS["Ace.ScrollBar"] || {};
  var exports = $PS["Ace.ScrollBar"];
  var $foreign = $PS["Ace.ScrollBar"];   
  var setScrollTop = function (scrollTop) {
      return function (self) {
          return $foreign.setScrollTopImpl(scrollTop, self);
      };
  };
  var setInnerHeight = function (height) {
      return function (self) {
          return $foreign.setInnerHeightImpl(height, self);
      };
  };
  var setHeight = function (height) {
      return function (self) {
          return $foreign.setHeightImpl(height, self);
      };
  };
  var onScroll = function (self) {
      return function (fn) {
          return $foreign.onScrollImpl(self, fn);
      };
  };
  var create = function (parent) {
      return function (vr) {
          return $foreign.createImpl(parent, vr);
      };
  };
  exports["create"] = create;
  exports["onScroll"] = onScroll;
  exports["setHeight"] = setHeight;
  exports["setInnerHeight"] = setInnerHeight;
  exports["setScrollTop"] = setScrollTop;
  exports["getWidth"] = $foreign.getWidth;
})(PS);
(function(exports) {
  "use strict";

  function effize(method) {
    return function () {
      var me = arguments[arguments.length - 1];
      var args = Array.prototype.slice.call(arguments, 0, -1);
      return function () {
        return me[method].apply(me, args);
      };
    };
  }

  exports.setImpl = effize("set");

  exports.findImpl = function (just, nothing, sess, search) {
    return function () {
      var result = search.find(sess);
      return result === null ? nothing : just(result);
    };
  };

  exports.findAllImpl = effize("findAll");
  exports.replaceImpl = effize("replace");

  exports.create = function () {
    var Search = ace.require("ace/search").Search;
    return new Search();
  };
})(PS["Ace.Search"] = PS["Ace.Search"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Ace.Search"] = $PS["Ace.Search"] || {};
  var exports = $PS["Ace.Search"];
  var $foreign = $PS["Ace.Search"];
  var Data_Maybe = $PS["Data.Maybe"];                
  var set = function (options) {
      return function (self) {
          return $foreign.setImpl(options, self);
      };
  };
  var replace = function (input) {
      return function (replacement) {
          return function (self) {
              return $foreign.replaceImpl(input, replacement, self);
          };
      };
  };
  var findAll = function (session) {
      return function (self) {
          return $foreign.findAllImpl(session, self);
      };
  };
  var find = function (session) {
      return function (self) {
          return $foreign.findImpl(Data_Maybe.Just.create, Data_Maybe.Nothing.value, session, self);
      };
  };
  exports["set"] = set;
  exports["find"] = find;
  exports["findAll"] = findAll;
  exports["replace"] = replace;
  exports["create"] = $foreign.create;
})(PS);
(function(exports) {
  "use strict";

  function effize(method) {
    return function () {
      var me = arguments[arguments.length - 1];
      var args = Array.prototype.slice.call(arguments, 0, -1);
      return function () {
        return me[method].apply(me, args);
      };
    };
  } 

  exports.moveCursorWordLeft = effize("moveCursorWordLeft");
  exports.moveCursorWordRight = effize("moveCursorWordRight");
  exports.fromOrientedRangeImpl = effize("fromOrientedRange");
  exports.getAllRanges = effize("getAllRanges");
  exports.addRangeImpl = effize("addRange");
  exports.isEmpty = effize("isEmpty");
  exports.isMultiLine = effize("isMultiLine");
  exports.getCursor = effize("getCursor");
  exports.setSelectionAnchorImpl = effize("setSelectionAnchor");
  exports.getSelectionAnchor = effize("getSelectionAnchor");
  exports.getSelectionLead = effize("getSelectionLead");
  exports.shiftSelectionImpl = effize("shiftSelection");
  exports.isBackwards = effize("isBackwards");
  exports.getRange = effize("getRange");
  exports.clearSelection = effize("clearSelection");
  exports.selectAll = effize("selectAll");
  exports.setRangeImpl = effize("setRange");
  exports.selectToImpl = effize("selectTo");                
  exports.selectUp = effize("selectUp");
  exports.selectDown = effize("selectDown");
  exports.selectRight = effize("selectRight");
  exports.selectLeft = effize("selectLeft");
  exports.selectLineStart = effize("selectLineStart");
  exports.selectLineEnd = effize("selectLineEnd");
  exports.selectFileEnd = effize("selectFileEnd");
  exports.selectFileStart = effize("selectFileStart");
  exports.selectWordRight = effize("selectWordRight");
  exports.selectWordLeft = effize("selectWordLeft");
  exports.getWordRange = effize("getWordRange");
  exports.selectWord = effize("selectWord");
  exports.selectAWord = effize("selectAWord");
  exports.selectLine = effize("selectLine");
  exports.moveCursorUp = effize("moveCursorUp");
  exports.moveCursorDown = effize("moveCursorDown");
  exports.moveCursorLeft = effize("moveCursorLeft");
  exports.moveCursorRight = effize("moveCursorRight");
  exports.moveCursorLineStart = effize("moveCursorLineStart");
  exports.moveCursorLineEnd = effize("moveCursorLineEnd");
  exports.moveCursorFileEnd = effize("moveCursorFileEnd");
  exports.moveCursorFileStart = effize("moveCursorFileStart");
  exports.moveCursorLongWordRight = effize("moveCursorLongWordRight");
  exports.moveCursorLongWordLeft = effize("moveCursorLongWordLeft");
  exports.moveCursorByImpl = effize("moveCursorBy");
  exports.moveCursorToImpl = effize("moveCursorTo");                
  exports.moveCursorToScreenImpl = effize("moveCursorToScreen");
})(PS["Ace.Selection"] = PS["Ace.Selection"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Ace.Selection"] = $PS["Ace.Selection"] || {};
  var exports = $PS["Ace.Selection"];
  var $foreign = $PS["Ace.Selection"];
  var Data_Nullable = $PS["Data.Nullable"];                
  var shiftSelection = function (columns) {
      return function (self) {
          return $foreign.shiftSelectionImpl(columns, self);
      };
  };
  var setSelectionAnchor = function (row) {
      return function (column) {
          return function (self) {
              return $foreign.setSelectionAnchorImpl(row, column, self);
          };
      };
  };
  var setRange = function (range) {
      return function (reverse) {
          return function (self) {
              return $foreign.setRangeImpl(range, reverse, self);
          };
      };
  };
  var selectTo = function (row) {
      return function (column) {
          return function (self) {
              return $foreign.selectToImpl(row, column, self);
          };
      };
  };
  var moveCursorToScreen = function (row) {
      return function (column) {
          return function (keepDesiredColumn) {
              return function (self) {
                  return $foreign.moveCursorToScreenImpl(row, column, keepDesiredColumn, self);
              };
          };
      };
  };
  var moveCursorTo = function (row) {
      return function (column) {
          return function (keepDesiredColumn) {
              return function (self) {
                  return $foreign.moveCursorToImpl(row, column, Data_Nullable.toNullable(keepDesiredColumn), self);
              };
          };
      };
  };
  var moveCursorBy = function (rows) {
      return function (chars) {
          return function (self) {
              return $foreign.moveCursorByImpl(rows, chars, self);
          };
      };
  };
  var fromOrientedRange = function (range) {
      return function (self) {
          return $foreign.fromOrientedRangeImpl(range, self);
      };
  };
  var addRange = function (range) {
      return function (self) {
          return $foreign.addRangeImpl(range, self);
      };
  };
  exports["addRange"] = addRange;
  exports["fromOrientedRange"] = fromOrientedRange;
  exports["moveCursorBy"] = moveCursorBy;
  exports["moveCursorTo"] = moveCursorTo;
  exports["moveCursorToScreen"] = moveCursorToScreen;
  exports["selectTo"] = selectTo;
  exports["setRange"] = setRange;
  exports["setSelectionAnchor"] = setSelectionAnchor;
  exports["shiftSelection"] = shiftSelection;
  exports["clearSelection"] = $foreign.clearSelection;
  exports["getAllRanges"] = $foreign.getAllRanges;
  exports["getCursor"] = $foreign.getCursor;
  exports["getRange"] = $foreign.getRange;
  exports["getSelectionAnchor"] = $foreign.getSelectionAnchor;
  exports["getSelectionLead"] = $foreign.getSelectionLead;
  exports["getWordRange"] = $foreign.getWordRange;
  exports["isBackwards"] = $foreign.isBackwards;
  exports["isEmpty"] = $foreign.isEmpty;
  exports["isMultiLine"] = $foreign.isMultiLine;
  exports["moveCursorDown"] = $foreign.moveCursorDown;
  exports["moveCursorFileEnd"] = $foreign.moveCursorFileEnd;
  exports["moveCursorFileStart"] = $foreign.moveCursorFileStart;
  exports["moveCursorLeft"] = $foreign.moveCursorLeft;
  exports["moveCursorLineEnd"] = $foreign.moveCursorLineEnd;
  exports["moveCursorLineStart"] = $foreign.moveCursorLineStart;
  exports["moveCursorLongWordLeft"] = $foreign.moveCursorLongWordLeft;
  exports["moveCursorLongWordRight"] = $foreign.moveCursorLongWordRight;
  exports["moveCursorRight"] = $foreign.moveCursorRight;
  exports["moveCursorUp"] = $foreign.moveCursorUp;
  exports["moveCursorWordLeft"] = $foreign.moveCursorWordLeft;
  exports["moveCursorWordRight"] = $foreign.moveCursorWordRight;
  exports["selectAWord"] = $foreign.selectAWord;
  exports["selectAll"] = $foreign.selectAll;
  exports["selectDown"] = $foreign.selectDown;
  exports["selectFileEnd"] = $foreign.selectFileEnd;
  exports["selectFileStart"] = $foreign.selectFileStart;
  exports["selectLeft"] = $foreign.selectLeft;
  exports["selectLineEnd"] = $foreign.selectLineEnd;
  exports["selectLine"] = $foreign.selectLine;
  exports["selectLineStart"] = $foreign.selectLineStart;
  exports["selectRight"] = $foreign.selectRight;
  exports["selectUp"] = $foreign.selectUp;
  exports["selectWord"] = $foreign.selectWord;
  exports["selectWordLeft"] = $foreign.selectWordLeft;
  exports["selectWordRight"] = $foreign.selectWordRight;
})(PS);
(function(exports) {
  "use strict";

  function effize(method) {
    return function () {
      var me = arguments[arguments.length - 1];
      var args = Array.prototype.slice.call(arguments, 0, -1);
      return function () {
        return me[method].apply(me, args);
      };
    };
  }

  exports.stepBackward = effize("stepBackward");
  exports.stepForward = effize("stepForward");
  exports.getCurrentToken = effize("getCurrentToken");
  exports.getCurrentTokenRow = effize("getCurrentTokenRow");
  exports.getCurrentTokenColumn = effize("getCurrentTokenColumn");

  exports.createImpl = function (session, initialRow, initialColumn) {
    return function () {
      var TokenIterator = ace.require("ace/token_iterator").TokenIterator;
      return new TokenIterator(session, initialRow, initialColumn);
    };
  };
})(PS["Ace.TokenIterator"] = PS["Ace.TokenIterator"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Ace.TokenIterator"] = $PS["Ace.TokenIterator"] || {};
  var exports = $PS["Ace.TokenIterator"];
  var $foreign = $PS["Ace.TokenIterator"];
  var create = function (session) {
      return function (initialRow) {
          return function (initialColumn) {
              return $foreign.createImpl(session, initialRow, initialColumn);
          };
      };
  };
  exports["create"] = create;
  exports["getCurrentToken"] = $foreign.getCurrentToken;
  exports["getCurrentTokenColumn"] = $foreign.getCurrentTokenColumn;
  exports["getCurrentTokenRow"] = $foreign.getCurrentTokenRow;
  exports["stepBackward"] = $foreign.stepBackward;
  exports["stepForward"] = $foreign.stepForward;
})(PS);
(function(exports) {
  "use strict";

  function effize(method) {
    return function () {
      var me = arguments[arguments.length - 1];
      var args = Array.prototype.slice.call(arguments, 0, -1);
      return function () {
        return me[method].apply(me, args);
      };
    };
  }

  exports.undoImpl = effize("undo");
  exports.redoImpl = effize("redo");
  exports.reset = effize("reset");
  exports.hasUndo = effize("hasUndo");
  exports.hasRedo = effize("hasRedo");

  exports.create = function () {
    var UndoManager = ace.require("ace/undomanager").UndoManager;
    return new UndoManager();
  };
})(PS["Ace.UndoManager"] = PS["Ace.UndoManager"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Ace.UndoManager"] = $PS["Ace.UndoManager"] || {};
  var exports = $PS["Ace.UndoManager"];
  var $foreign = $PS["Ace.UndoManager"];
  var Data_Nullable = $PS["Data.Nullable"];                
  var undo = function (dontSelect) {
      return function (self) {
          return $foreign.undoImpl(Data_Nullable.toNullable(dontSelect), self);
      };
  };
  var redo = function (dontSelect) {
      return function (self) {
          return $foreign.redoImpl(dontSelect, self);
      };
  };
  exports["undo"] = undo;
  exports["redo"] = redo;
  exports["create"] = $foreign.create;
  exports["hasUndo"] = $foreign.hasUndo;
  exports["hasRedo"] = $foreign.hasRedo;
  exports["reset"] = $foreign.reset;
})(PS);
(function(exports) {
  "use strict";

  exports.pushAll = function (as) {
    return function (xs) {
      return function () {
        return xs.push.apply(xs, as);
      };
    };
  };

  function copyImpl(xs) {
    return function () {
      return xs.slice();
    };
  }
})(PS["Data.Array.ST"] = PS["Data.Array.ST"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Array.ST"] = $PS["Data.Array.ST"] || {};
  var exports = $PS["Data.Array.ST"];
  var $foreign = $PS["Data.Array.ST"];
  var push = function (a) {
      return $foreign.pushAll([ a ]);
  };
  exports["push"] = push;
})(PS);
(function(exports) {
  "use strict";

  exports.showIntImpl = function (n) {
    return n.toString();
  };

  exports.showStringImpl = function (s) {
    var l = s.length;
    return "\"" + s.replace(
      /[\0-\x1F\x7F"\\]/g, // eslint-disable-line no-control-regex
      function (c, i) {
        switch (c) {
          case "\"":
          case "\\":
            return "\\" + c;
          case "\x07": return "\\a";
          case "\b": return "\\b";
          case "\f": return "\\f";
          case "\n": return "\\n";
          case "\r": return "\\r";
          case "\t": return "\\t";
          case "\v": return "\\v";
        }
        var k = i + 1;
        var empty = k < l && s[k] >= "0" && s[k] <= "9" ? "\\&" : "";
        return "\\" + c.charCodeAt(0).toString(10) + empty;
      }
    ) + "\"";
  };

  exports.showArrayImpl = function (f) {
    return function (xs) {
      var ss = [];
      for (var i = 0, l = xs.length; i < l; i++) {
        ss[i] = f(xs[i]);
      }
      return "[" + ss.join(",") + "]";
    };
  };
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Data.Show"] = $PS["Data.Show"] || {};
  var exports = $PS["Data.Show"];
  var $foreign = $PS["Data.Show"];
  var Show = function (show) {
      this.show = show;
  };
  var showString = new Show($foreign.showStringImpl);
  var showInt = new Show($foreign.showIntImpl);
  var show = function (dict) {
      return dict.show;
  };
  var showArray = function (dictShow) {
      return new Show($foreign.showArrayImpl(show(dictShow)));
  };
  exports["show"] = show;
  exports["showInt"] = showInt;
  exports["showString"] = showString;
  exports["showArray"] = showArray;
})(PS);
(function(exports) {
  "use strict";

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
})(PS["Effect"] = PS["Effect"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Effect"] = $PS["Effect"] || {};
  var exports = $PS["Effect"];
  var $foreign = $PS["Effect"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Functor = $PS["Data.Functor"];                    
  var monadEffect = new Control_Monad.Monad(function () {
      return applicativeEffect;
  }, function () {
      return bindEffect;
  });
  var bindEffect = new Control_Bind.Bind(function () {
      return applyEffect;
  }, $foreign.bindE);
  var applyEffect = new Control_Apply.Apply(function () {
      return functorEffect;
  }, Control_Monad.ap(monadEffect));
  var applicativeEffect = new Control_Applicative.Applicative(function () {
      return applyEffect;
  }, $foreign.pureE);
  var functorEffect = new Data_Functor.Functor(Control_Applicative.liftA1(applicativeEffect));
  exports["functorEffect"] = functorEffect;
  exports["applicativeEffect"] = applicativeEffect;
  exports["bindEffect"] = bindEffect;
})(PS);
(function(exports) {
  "use strict";

  exports.log = function (s) {
    return function () {
      console.log(s);
    };
  };
})(PS["Effect.Console"] = PS["Effect.Console"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Effect.Console"] = $PS["Effect.Console"] || {};
  var exports = $PS["Effect.Console"];
  var $foreign = $PS["Effect.Console"];
  exports["log"] = $foreign.log;
})(PS);
(function(exports) {
  "use strict";

  exports.new = function (val) {
    return function () {
      return { value: val };
    };
  };

  exports.read = function (ref) {
    return function () {
      return ref.value;
    };
  };

  exports.write = function (val) {
    return function (ref) {
      return function () {
        ref.value = val;
      };
    };
  };
})(PS["Effect.Ref"] = PS["Effect.Ref"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Effect.Ref"] = $PS["Effect.Ref"] || {};
  var exports = $PS["Effect.Ref"];
  var $foreign = $PS["Effect.Ref"];
  exports["new"] = $foreign["new"];
  exports["read"] = $foreign.read;
  exports["write"] = $foreign.write;
})(PS);
(function(exports) {
  /* global window */
  "use strict";

  exports.rules = {
    "start": [{ token: "example", regex: "[a-z]*" }]
  };

  exports.onLoad = function (action) {
    return function () {
      window.addEventListener("load", function () {
        action();
      });
    };
  };
})(PS["Example.Main"] = PS["Example.Main"] || {});
(function($PS) {
  // Generated by purs version 0.14.1
  "use strict";
  $PS["Example.Main"] = $PS["Example.Main"] || {};
  var exports = $PS["Example.Main"];
  var $foreign = $PS["Example.Main"];
  var Ace = $PS["Ace"];
  var Ace_Anchor = $PS["Ace.Anchor"];
  var Ace_BackgroundTokenizer = $PS["Ace.BackgroundTokenizer"];
  var Ace_Config = $PS["Ace.Config"];
  var Ace_Document = $PS["Ace.Document"];
  var Ace_EditSession = $PS["Ace.EditSession"];
  var Ace_Editor = $PS["Ace.Editor"];
  var Ace_Ext_LanguageTools = $PS["Ace.Ext.LanguageTools"];
  var Ace_Ext_LanguageTools_Completer = $PS["Ace.Ext.LanguageTools.Completer"];
  var Ace_KeyBinding = $PS["Ace.KeyBinding"];
  var Ace_Range = $PS["Ace.Range"];
  var Ace_ScrollBar = $PS["Ace.ScrollBar"];
  var Ace_Search = $PS["Ace.Search"];
  var Ace_Selection = $PS["Ace.Selection"];
  var Ace_TokenIterator = $PS["Ace.TokenIterator"];
  var Ace_Types = $PS["Ace.Types"];
  var Ace_UndoManager = $PS["Ace.UndoManager"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Array_ST = $PS["Data.Array.ST"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Show = $PS["Data.Show"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Effect_Console = $PS["Effect.Console"];
  var Effect_Ref = $PS["Effect.Ref"];                
  var miscTests = Data_Functor["void"](Effect.functorEffect)(function __do() {
      var editor = Ace.edit("tests")(Ace.ace)();
      var session = Ace_Editor.getSession(editor)();
      var document = Ace_EditSession.getDocument(session)();
      var range = Ace_Range.create(0)(0)(0)(1)();
      var ctr = Ace_Editor.getContainer(editor)();
      var vr = Ace_Editor.getRenderer(editor)();
      var scrollBar = Ace_ScrollBar.create(ctr)(vr)();
      var search = Ace_Search.create();
      var backgroundTokenizer = Ace_EditSession.getBackgroundTokenizer(session)();
      var anchor = Ace_Document.createAnchor(0)(0)(document)();
      Ace_Anchor.getPosition(anchor)();
      Ace_Anchor.getDocument(anchor)();
      Ace_Anchor.setPosition(0)(0)(true)(anchor)();
      Ace_Anchor.detach(anchor)();
      var position = Ace_Document.indexToPosition(0)(0)(document)();
      var tokenIterator = Ace_TokenIterator.create(session)(0)(0)();
      Ace_TokenIterator.stepForward(tokenIterator)();
      Ace_TokenIterator.stepBackward(tokenIterator)();
      Ace_TokenIterator.getCurrentToken(tokenIterator)();
      Ace_TokenIterator.getCurrentTokenRow(tokenIterator)();
      Ace_TokenIterator.getCurrentTokenColumn(tokenIterator)();
      Ace_BackgroundTokenizer.setDocument(document)(backgroundTokenizer)();
      Ace_BackgroundTokenizer.fireUpdateEvent(0)(0)(backgroundTokenizer)();
      Ace_BackgroundTokenizer.start(0)(backgroundTokenizer)();
      Ace_BackgroundTokenizer.stop(backgroundTokenizer)();
      Ace_BackgroundTokenizer.getTokens(0)(backgroundTokenizer)();
      Ace_BackgroundTokenizer.getState(0)(backgroundTokenizer)();
      Ace_Document.getValue(document)();
      Ace_Document.createAnchor(0)(0)(document)();
      Ace_Document.getNewLineCharacter(document)();
      Ace_Document.getNewLineMode(document)();
      Ace_Document.isNewLine("")(document)();
      Ace_Document.getLine(0)(document)();
      Ace_Document.getLines(0)(0)(document)();
      Ace_Document.getAllLines(document)();
      Ace_Document.getLength(document)();
      Ace_Document.getTextRange(range)(document)();
      Ace_Document.insert(position)("")(document)();
      Ace_Document.insertNewLine(position)(document)();
      Ace_Document.remove(range)(document)();
      Ace_Document.removeInLine(0)(0)(0)(document)();
      Ace_Document.removeLines(0)(0)(document)();
      Ace_Document.removeNewLine(0)(document)();
      Ace_Document.replace(range)("")(document)();
      Ace_Document.indexToPosition(0)(0)(document)();
      Ace_Document.positionToIndex(position)(0)(document)();
      var undoManager = Ace_UndoManager.create();
      Ace_EditSession.findMatchingBracket(position)(session)();
      Ace_EditSession.screenToDocumentColumn(0)(0)(session)();
      Ace_EditSession.highlight("")(session)();
      Ace_EditSession.setDocument(document)(session)();
      Ace_EditSession.getDocument(session)();
      Ace_EditSession.resetRowCache(0)(session)();
      Ace_EditSession.setValue("")(session)();
      Ace_EditSession.setMode("")(session)();
      Ace_EditSession.getValue(session)();
      Ace_EditSession.getSelection(session)();
      Ace_EditSession.getState(0)(session)();
      Ace_EditSession.getTokens(0)(session)();
      Ace_EditSession.getTokenAt(0)(0)(session)();
      Ace_EditSession.setUndoManager(undoManager)(session)();
      Ace_EditSession.getUndoManager(session)();
      Ace_EditSession.getTabString(session)();
      Ace_EditSession.setUseSoftTabs(true)(session)();
      Ace_EditSession.getUseSoftTabs(session)();
      Ace_EditSession.setTabSize(0)(session)();
      Ace_EditSession.getTabSize(session)();
      Ace_EditSession.setOverwrite(true)(session)();
      Ace_EditSession.getOverwrite(session)();
      Ace_EditSession.toggleOverwrite(session)();
      Ace_EditSession.addGutterDecoration(0)("")(session)();
      Ace_EditSession.removeGutterDecoration(0)("")(session)();
      Ace_EditSession.getBreakpoints(session)();
      Ace_EditSession.setBreakpoints([  ])(session)();
      Ace_EditSession.clearBreakpoints(session)();
      Ace_EditSession.setBreakpoint(0)("")(session)();
      Ace_EditSession.clearBreakpoint(0)(session)();
      Ace_EditSession.addMarker(range)("")("")(true)(session)();
      Ace_EditSession.setAnnotations([  ])(session)();
      Ace_EditSession.getAnnotations(session)();
      Ace_EditSession.clearAnnotations(session)();
      Ace_EditSession.detectNewLine("")(session)();
      Ace_EditSession.getWordRange(0)(0)(session)();
      Ace_EditSession.getAWordRange(0)(0)(session)();
      Ace_EditSession.setNewLineMode("")(session)();
      Ace_EditSession.getNewLineMode(session)();
      Ace_EditSession.setUseWorker(true)(session)();
      Ace_EditSession.getUseWorker(session)();
      Ace_EditSession.getMode(session)();
      Ace_EditSession.setScrollTop(0)(session)();
      Ace_EditSession.getScrollTop(session)();
      Ace_EditSession.setScrollLeft(0)(session)();
      Ace_EditSession.getScrollLeft(session)();
      Ace_EditSession.getScreenWidth(session)();
      Ace_EditSession.getLine(0)(session)();
      Ace_EditSession.getLines(0)(0)(session)();
      Ace_EditSession.getLength(session)();
      Ace_EditSession.getTextRange(range)(session)();
      Ace_EditSession.insert(position)("")(session)();
      Ace_EditSession.remove(range)(session)();
      Ace_EditSession.setUndoSelect(true)(session)();
      Ace_EditSession.replace(range)("")(session)();
      Ace_EditSession.indentRows(0)(0)("")(session)();
      Ace_EditSession.outdentRows(range)(session)();
      Ace_EditSession.moveLinesUp(0)(0)(session)();
      Ace_EditSession.moveLinesDown(0)(0)(session)();
      Ace_EditSession.duplicateLines(0)(0)(session)();
      Ace_EditSession.setUseWrapMode(true)(session)();
      Ace_EditSession.getUseWrapMode(session)();
      Ace_EditSession.setWrapLimitRange(0)(0)(session)();
      Ace_EditSession.adjustWrapLimit(0)(session)();
      Ace_EditSession.getWrapLimit(session)();
      Ace_EditSession.getWrapLimitRange(session)();
      Ace_EditSession.getDisplayTokens("")(0)(session)();
      Ace_EditSession.getStringScreenWidth("")(0)(0)(session)();
      Ace_EditSession.getRowLength(0)(session)();
      Ace_EditSession.getScreenLastRowColumn(0)(session)();
      Ace_EditSession.getDocumentLastRowColumn(0)(0)(session)();
      Ace_EditSession.getDocumentLastRowColumnPosition(0)(0)(session)();
      Ace_EditSession.getRowSplitData(session)();
      Ace_EditSession.getScreenTabSize(0)(session)();
      Ace_EditSession.screenToDocumentPosition(0)(0)(session)();
      Ace_EditSession.documentToScreenPosition(0)(0)(session)();
      Ace_EditSession.documentToScreenColumn(0)(0)(session)();
      Ace_EditSession.documentToScreenRow(0)(0)(session)();
      Ace_EditSession.getScreenLength(session)();
      Ace_Editor.selectMoreLines(0)(editor)();
      Ace_Editor.setKeyboardHandler("")(editor)();
      Ace_Editor.getKeyboardHandler(editor)();
      Ace_Editor.setSession(session)(editor)();
      Ace_Editor.getSession(editor)();
      Ace_Editor.setValue("")(Data_Maybe.Nothing.value)(editor)();
      Ace_Editor.getValue(editor)();
      Ace_Editor.getSelection(editor)();
      Ace_Editor.resize(Data_Maybe.Nothing.value)(editor)();
      Ace_Editor.setTheme("")(editor)();
      Ace_Editor.getTheme(editor)();
      Ace_Editor.setStyle("")(editor)();
      Ace_Editor.unsetStyle(editor)();
      Ace_Editor.setFontSize("")(editor)();
      Ace_Editor.focus(editor)();
      Ace_Editor.isFocused(editor)();
      Ace_Editor.blur(editor)();
      Ace_Editor.getCopyText(editor)();
      Ace_Editor.insert("")(editor)();
      Ace_Editor.setOverwrite(true)(editor)();
      Ace_Editor.getOverwrite(editor)();
      Ace_Editor.toggleOverwrite(editor)();
      Ace_Editor.setScrollSpeed(0.0)(editor)();
      Ace_Editor.getScrollSpeed(editor)();
      Ace_Editor.setDragDelay(0.0)(editor)();
      Ace_Editor.getDragDelay(editor)();
      Ace_Editor.setSelectionStyle("")(editor)();
      Ace_Editor.getSelectionStyle(editor)();
      Ace_Editor.setHighlightActiveLine(true)(editor)();
      Ace_Editor.getHighlightActiveLine(editor)();
      Ace_Editor.setHighlightSelectedWord(true)(editor)();
      Ace_Editor.getHighlightSelectedWord(editor)();
      Ace_Editor.setShowInvisibles(true)(editor)();
      Ace_Editor.getShowInvisibles(editor)();
      Ace_Editor.setShowPrintMargin(true)(editor)();
      Ace_Editor.getShowPrintMargin(editor)();
      Ace_Editor.setPrintMarginColumn(0)(editor)();
      Ace_Editor.getPrintMarginColumn(editor)();
      Ace_Editor.setReadOnly(true)(editor)();
      Ace_Editor.getReadOnly(editor)();
      Ace_Editor.setBehavioursEnabled(true)(editor)();
      Ace_Editor.getBehavioursEnabled(editor)();
      Ace_Editor.setWrapBehavioursEnabled(true)(editor)();
      Ace_Editor.getWrapBehavioursEnabled(editor)();
      Ace_Editor.setShowFoldWidgets(true)(editor)();
      Ace_Editor.getShowFoldWidgets(editor)();
      Ace_Editor.remove("")(editor)();
      Ace_Editor.removeWordRight(editor)();
      Ace_Editor.removeWordLeft(editor)();
      Ace_Editor.removeToLineStart(editor)();
      Ace_Editor.removeToLineEnd(editor)();
      Ace_Editor.splitLine(editor)();
      Ace_Editor.transposeLetters(editor)();
      Ace_Editor.toLowerCase(editor)();
      Ace_Editor.toUpperCase(editor)();
      Ace_Editor.indent(editor)();
      Ace_Editor.blockIndent(editor)();
      Ace_Editor.blockOutdent(Data_Maybe.Nothing.value)(editor)();
      Ace_Editor.toggleCommentLines(editor)();
      Ace_Editor.getNumberAt(editor)();
      Ace_Editor.modifyNumber(0.0)(editor)();
      Ace_Editor.removeLines(editor)();
      Ace_Editor.moveLinesDown(editor)();
      Ace_Editor.moveLinesUp(editor)();
      Ace_Editor.copyLinesUp(editor)();
      Ace_Editor.copyLinesDown(editor)();
      Ace_Editor.getFirstVisibleRow(editor)();
      Ace_Editor.getLastVisibleRow(editor)();
      Ace_Editor.isRowVisible(0)(editor)();
      Ace_Editor.isRowFullyVisible(0)(editor)();
      Ace_Editor.selectPageDown(editor)();
      Ace_Editor.selectPageUp(editor)();
      Ace_Editor.gotoPageDown(editor)();
      Ace_Editor.gotoPageUp(editor)();
      Ace_Editor.scrollPageDown(editor)();
      Ace_Editor.scrollPageUp(editor)();
      Ace_Editor.scrollToRow(editor)();
      Ace_Editor.centerSelection(editor)();
      Ace_Editor.getCursorPosition(editor)();
      Ace_Editor.getCursorPositionScreen(editor)();
      Ace_Editor.getSelectionRange(editor)();
      Ace_Editor.selectAll(editor)();
      Ace_Editor.clearSelection(editor)();
      Ace_Editor.moveCursorTo(0)(Data_Maybe.Nothing.value)(Data_Maybe.Nothing.value)(editor)();
      Ace_Editor.moveCursorToPosition(position)(editor)();
      Ace_Editor.jumpToMatching(editor)();
      Ace_Editor.gotoLine(0)(Data_Maybe.Nothing.value)(Data_Maybe.Nothing.value)(editor)();
      Ace_Editor.navigateTo(0)(0)(editor)();
      Ace_Editor.navigateUp(Data_Maybe.Nothing.value)(editor)();
      Ace_Editor.navigateDown(Data_Maybe.Nothing.value)(editor)();
      Ace_Editor.navigateLeft(Data_Maybe.Nothing.value)(editor)();
      Ace_Editor.navigateRight(0)(editor)();
      Ace_Editor.navigateLineStart(editor)();
      Ace_Editor.navigateLineEnd(editor)();
      Ace_Editor.navigateFileEnd(editor)();
      Ace_Editor.navigateFileStart(editor)();
      Ace_Editor.navigateWordRight(editor)();
      Ace_Editor.navigateWordLeft(editor)();
      Ace_Editor.replace("")(Data_Maybe.Nothing.value)(editor)();
      Ace_Editor.replaceAll("")(Data_Maybe.Nothing.value)(editor)();
      Ace_Editor.getLastSearchOptions(editor)();
      Ace_Editor.find("")(Data_Maybe.Nothing.value)(Data_Maybe.Nothing.value)(editor)();
      Ace_Editor.findNext(Data_Maybe.Nothing.value)(Data_Maybe.Nothing.value)(editor)();
      Ace_Editor.findPrevious(Data_Maybe.Nothing.value)(Data_Maybe.Nothing.value)(editor)();
      Ace_Editor.undo(editor)();
      Ace_Editor.redo(editor)();
      Ace_Editor.destroy(editor)();
      Ace_Range.isEmpty(range)();
      Ace_Range.isEqual(range)(range)();
      Ace_Range.toString(range)();
      Ace_Range.contains(0)(0)(range)();
      Ace_Range.compareRange(range)(range)();
      Ace_Range.comparePoint(range)(range)();
      Ace_Range.containsRange(range)(range)();
      Ace_Range.intersects(range)(range)();
      Ace_Range.isEnd(0)(0)(range)();
      Ace_Range.isStart(0)(0)(range)();
      Ace_Range.setStart(0)(0)(range)();
      Ace_Range.setEnd(0)(0)(range)();
      Ace_Range.inside(0)(0)(range)();
      Ace_Range.insideStart(0)(0)(range)();
      Ace_Range.insideEnd(0)(0)(range)();
      Ace_Range.compare(0)(0)(range)();
      Ace_Range.compareStart(0)(0)(range)();
      Ace_Range.compareEnd(0)(0)(range)();
      Ace_Range.compareInside(0)(0)(range)();
      Ace_Range.clipRows(0)(0)(range)();
      Ace_Range.extend(0)(0)(range)();
      Ace_Range.isMultiLine(range)();
      Ace_Range.clone(range)();
      Ace_Range.collapseRows(range)();
      Ace_Range.toScreenRange(session)(range)();
      Ace_Range.fromPoints(range)(range)();
      Ace_ScrollBar.getWidth(scrollBar)();
      Ace_ScrollBar.setHeight(0)(scrollBar)();
      Ace_ScrollBar.setInnerHeight(0)(scrollBar)();
      Ace_ScrollBar.setScrollTop(0)(scrollBar)();
      Ace_Search.find(session)(search)();
      Ace_Search.findAll(session)(search)();
      Ace_Search.replace("")("")(search)();
      var selection = Ace_EditSession.getSelection(session)();
      Ace_Selection.moveCursorWordLeft(selection)();
      Ace_Selection.moveCursorWordRight(selection)();
      Ace_Selection.fromOrientedRange(range)(selection)();
      Ace_Selection.getAllRanges(selection)();
      Ace_Selection.addRange(range)(selection)();
      Ace_Selection.isEmpty(selection)();
      Ace_Selection.isMultiLine(selection)();
      Ace_Selection.getCursor(selection)();
      Ace_Selection.setSelectionAnchor(0)(0)(selection)();
      Ace_Selection.getSelectionAnchor(selection)();
      Ace_Selection.getSelectionLead(selection)();
      Ace_Selection.shiftSelection(0)(selection)();
      Ace_Selection.isBackwards(selection)();
      Ace_Selection.getRange(selection)();
      Ace_Selection.clearSelection(selection)();
      Ace_Selection.selectAll(selection)();
      Ace_Selection.setRange(range)(true)(selection)();
      Ace_Selection.selectTo(0)(0)(selection)();
      Ace_Selection.selectUp(selection)();
      Ace_Selection.selectDown(selection)();
      Ace_Selection.selectRight(selection)();
      Ace_Selection.selectLeft(selection)();
      Ace_Selection.selectLineStart(selection)();
      Ace_Selection.selectLineEnd(selection)();
      Ace_Selection.selectFileEnd(selection)();
      Ace_Selection.selectFileStart(selection)();
      Ace_Selection.selectWordRight(selection)();
      Ace_Selection.selectWordLeft(selection)();
      Ace_Selection.getWordRange(selection)();
      Ace_Selection.selectWord(selection)();
      Ace_Selection.selectAWord(selection)();
      Ace_Selection.selectLine(selection)();
      Ace_Selection.moveCursorUp(selection)();
      Ace_Selection.moveCursorDown(selection)();
      Ace_Selection.moveCursorLeft(selection)();
      Ace_Selection.moveCursorRight(selection)();
      Ace_Selection.moveCursorLineStart(selection)();
      Ace_Selection.moveCursorLineEnd(selection)();
      Ace_Selection.moveCursorFileEnd(selection)();
      Ace_Selection.moveCursorFileStart(selection)();
      Ace_Selection.moveCursorLongWordRight(selection)();
      Ace_Selection.moveCursorLongWordLeft(selection)();
      Ace_Selection.moveCursorBy(0)(0)(selection)();
      Ace_Selection.moveCursorTo(0)(0)(Data_Maybe.Nothing.value)(selection)();
      Ace_Selection.moveCursorToScreen(0)(0)(true)(selection)();
      Ace_UndoManager.undo(Data_Maybe.Nothing.value)(undoManager)();
      Ace_UndoManager.redo(true)(undoManager)();
      Ace_UndoManager.reset(undoManager)();
      Ace_UndoManager.hasUndo(undoManager)();
      Ace_UndoManager.hasRedo(undoManager)();
      return Data_Unit.unit;
  });
  var main = $foreign.onLoad(function __do() {
      Ace_Config.set(Ace_Config.basePath)("foo")();
      var editor = Ace.edit("editor")(Ace.ace)();
      var session = Ace_Editor.getSession(editor)();
      var document = Ace_EditSession.getDocument(session)();
      Ace_Editor.setValue("blablabla \x0a tr  test boo boo")(Data_Maybe.Nothing.value)(editor)();
      var startAnchor = Ace_Document.createAnchor(1)(5)(document)();
      var endAnchor = Ace_Document.createAnchor(1)(9)(document)();
      Ace_Anchor.setInsertRight(true)(endAnchor)();
      var range = Ace_Range.create(1)(4)(1)(10)();
      var markerRef = Control_Bind.bind(Effect.bindEffect)(Ace_EditSession.addMarker(range)("readonly-highlight")("string")(false)(session))(Effect_Ref["new"])();
      var rerenderMarker = function (v) {
          return function __do() {
              Control_Bind.bind(Effect.bindEffect)(Effect_Ref.read(markerRef))(Data_Function.flip(Ace_EditSession.removeMarker)(session))();
              var v1 = Ace_Anchor.getPosition(startAnchor)();
              var v2 = Ace_Anchor.getPosition(endAnchor)();
              var markRange = Ace_Range.create(v1.row)(v1.column - 1 | 0)(v2.row)(v2.column + 1 | 0)();
              var newMId = Ace_EditSession.addMarker(markRange)("readonly-highlight")("string")(false)(session)();
              Effect_Ref.write(newMId)(markerRef)();
              return Data_Unit.unit;
          };
      };
      Ace_Anchor.onChange(startAnchor)(rerenderMarker)();
      Ace_Anchor.onChange(endAnchor)(rerenderMarker)();
      Control_Bind.bind(Effect.bindEffect)(Ace_Editor.getKeyBinding(editor))(Ace_KeyBinding.addKeyboardHandler(function (handler) {
          return function (hs) {
              return function (kstring) {
                  return function (kcode) {
                      return function (evt) {
                          var $17 = hs === (-1 | 0) || kcode <= 40 && kcode >= 37;
                          if ($17) {
                              return Control_Applicative.pure(Effect.applicativeEffect)(Data_Maybe.Nothing.value);
                          };
                          return function __do() {
                              var v = Ace_Anchor.getPosition(startAnchor)();
                              var v1 = Ace_Anchor.getPosition(endAnchor)();
                              var selectedRange = Ace_Editor.getSelectionRange(handler.editor)();
                              var newRange = (function () {
                                  var $20 = kstring === "backspace";
                                  if ($20) {
                                      return Ace_Range.create(v.row)(v.column)(v1.row)(v1.column + 1 | 0)();
                                  };
                                  var $21 = kstring === "delete" || kstring === "d" && hs === 1;
                                  if ($21) {
                                      return Ace_Range.create(v.row)(v.column - 1 | 0)(v1.row)(v1.column)();
                                  };
                                  return Ace_Range.create(v.row)(v.column)(v1.row)(v1.column)();
                              })();
                              var intersected = Ace_Range.intersects(newRange)(selectedRange)();
                              if (intersected) {
                                  return new Data_Maybe.Just({
                                      command: Ace_Types.Null.value,
                                      passEvent: false
                                  });
                              };
                              return Data_Maybe.Nothing.value;
                          };
                      };
                  };
              };
          };
      }))();
      Ace_Editor.setTheme("ace/theme/chrome")(editor)();
      Ace_Editor.onCopy(editor)(function (s) {
          return Effect_Console.log("Text copied: " + s);
      })();
      Ace_Editor.onPaste(editor)(function (v) {
          return Effect_Console.log("Text pasted.");
      })();
      Ace_Editor.onBlur(editor)(Effect_Console.log("Editor lost focus."))();
      Ace_Editor.onFocus(editor)(Effect_Console.log("Editor gained focus."))();
      Ace_EditSession.setMode("ace/mode/javascript")(session)();
      var mode = Ace_EditSession.getMode(session)();
      var session1 = Ace.createEditSession("")(mode)(Ace.ace)();
      Ace_Document.onChange(document)(function (v) {
          return Effect_Console.log("Document changed: " + Ace_Types.showDocumentEventType(v.action));
      })();
      Ace_Document.setNewLineMode(Ace_Types.Windows.value)(document)();
      var anchor = Ace_Document.createAnchor(0)(0)(document)();
      var position = Ace_Anchor.getPosition(anchor)();
      Effect_Console.log("Initial anchor position: " + (Data_Show.show(Data_Show.showInt)(Ace_Types.getRow(position)) + (", " + (Data_Show.show(Data_Show.showInt)(Ace_Types.getColumn(position)) + ". Should be 0, 0"))))();
      Ace_Anchor.setPosition(0)(1)(true)(anchor)();
      Ace_Anchor.onChange(anchor)(function (e) {
          return function __do() {
              Effect_Console.log("New anchor position: " + (Data_Show.show(Data_Show.showInt)(Ace_Types.getRow(e.value)) + (", " + Data_Show.show(Data_Show.showInt)(Ace_Types.getColumn(e.value)))))();
              return Ace_Anchor.detach(anchor)();
          };
      })();
      Ace_EditSession.addDynamicMarker(function (html) {
          return function (v) {
              return Data_Array_ST.push("<i>lulz</i>")(html);
          };
      })(true)(session)();
      var backgroundTokenizer = Ace_EditSession.getBackgroundTokenizer(session)();
      var tokens = Ace_BackgroundTokenizer.getTokens(0)(backgroundTokenizer)();
      Effect_Console.log("tokens " + Data_Show.show(Data_Show.showArray(Data_Show.showString))(Data_Functor.map(Data_Functor.functorArray)(function (o) {
          return o.value;
      })(tokens)))();
      var state = Ace_BackgroundTokenizer.getState(0)(backgroundTokenizer)();
      Effect_Console.log("state " + state)();
      var ctr = Ace_Editor.getContainer(editor)();
      var vr = Ace_Editor.getRenderer(editor)();
      var scrollBar = Ace_ScrollBar.create(ctr)(vr)();
      Ace_ScrollBar.onScroll(scrollBar)(Effect_Console.log("Scrolled"))();
      var search = Ace_Search.create();
      Ace_Search.set({
          needle: "boo",
          backwards: false,
          wrap: false,
          caseSensitive: false,
          wholeWord: true,
          regExp: false,
          skipCurrent: false
      })(search)();
      var range$prime = Ace_Search.find(session)(search)();
      Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(range$prime)(function (r) {
          return Ace_EditSession.addFold("fold")(r)(session);
      })();
      Ace_EditSession.addGutterDecoration(0)("?")(session)();
      Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(range$prime)(function (r) {
          return Ace_EditSession.addMarker(r)("1")("2")(false)(session);
      })();
      Ace_EditSession.adjustWrapLimit(20)(session)();
      Ace_Editor.moveCursorTo(0)(Data_Maybe.Nothing.value)(Data_Maybe.Nothing.value)(editor)();
      Ace_EditSession.setMode("ace/mode/text")(session)();
      var languageTools = Ace_Ext_LanguageTools.languageTools();
      Ace_Editor.setEnableBasicAutocompletion(true)(editor)();
      var completer = Ace_Ext_LanguageTools_Completer.mkCompleter(function (v) {
          return function (v1) {
              return function (v2) {
                  return function (inp) {
                      return function (cb) {
                          return cb(Control_Applicative.pure(Data_Maybe.applicativeMaybe)([ {
                              value: inp + "!!",
                              score: 100.0,
                              caption: Control_Applicative.pure(Data_Maybe.applicativeMaybe)("???"),
                              meta: "!!"
                          }, {
                              value: "abcde",
                              score: 200.0,
                              caption: Data_Maybe.Nothing.value,
                              meta: "abcde"
                          } ]));
                      };
                  };
              };
          };
      })();
      Ace_Ext_LanguageTools.addCompleter(completer)(languageTools)();
      return Data_Unit.unit;
  });
  exports["main"] = main;
  exports["miscTests"] = miscTests;
  exports["rules"] = $foreign.rules;
  exports["onLoad"] = $foreign.onLoad;
})(PS);
PS["Example.Main"].main();